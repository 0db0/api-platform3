WEBVTT

00:00:00.086 --> 00:00:06.596 align:middle
¡Abróchense las escamas,
entusiastas de los dragones! Es

00:00:06.896 --> 00:00:09.116 align:middle
hora de sumergirnos en el tercer episodio

00:00:09.146 --> 00:00:14.496 align:middle
de nuestra fascinante saga API Platform:
el episodio en el que las cosas se ponen...

00:00:14.876 --> 00:00:17.756 align:middle
digamos: más avanzadas e interesantes.

00:00:18.356 --> 00:00:24.046 align:middle
El episodio 1 fue nuestra introducción, y cubrimos
muchas cosas: paginación, filtrado y mucho

00:00:24.046 --> 00:00:29.316 align:middle
sobre serialización: cómo nuestros objetos
de recursos API se convierten en JSON

00:00:29.496 --> 00:00:34.416 align:middle
y cómo el JSON enviado por el usuario se
convierte de nuevo en esos mismos objetos.

00:00:35.116 --> 00:00:39.826 align:middle
El Episodio 2 trataba de la seguridad e
incluía cosas como procesadores de estado -la

00:00:40.066 --> 00:00:46.026 align:middle
clave para ejecutar código antes o después de guardar-,
campos personalizados, validación, votantes y mucho más.

00:00:46.686 --> 00:00:48.396 align:middle
Todo eso son cosas buenas.

00:00:48.926 --> 00:00:54.426 align:middle
Pero, hasta ahora, todas nuestras clases de
#[ApiResource] han sido entidades Doctrine.

00:00:54.426 --> 00:00:55.656 align:middle
Y eso está muy bien

00:00:56.266 --> 00:01:02.156 align:middle
Pero a medida que tu API empieza a ser diferente de tus
entidades, hacer que eso funcione añade complejidad:

00:01:02.686 --> 00:01:08.826 align:middle
grupos de serialización, ampliación de normalizadores,
etc. En algún momento, resulta más fácil

00:01:08.826 --> 00:01:13.526 align:middle
y claro dejar de utilizar tu
entidad directamente para tu API y,

00:01:13.746 --> 00:01:16.726 align:middle
en su lugar, crear una clase dedicada.

00:01:17.356 --> 00:01:20.056 align:middle
Ése es el mayor enfoque de este tutorial...

00:01:20.556 --> 00:01:25.256 align:middle
y nos adentrará en el concepto de
proveedores y procesadores de estado...

00:01:25.456 --> 00:01:27.796 align:middle
que son básicamente el núcleo de todo.

00:01:28.656 --> 00:01:30.756 align:middle
Muy bien gente, ¡hagámoslo!

00:01:31.346 --> 00:01:36.476 align:middle
Te recomiendo que te apuntes y codifiques conmigo:
es más divertido y sacarás más provecho de esto.

00:01:37.046 --> 00:01:40.576 align:middle
Descarga el código del curso desde
esta página y, cuando lo descomprimas,

00:01:40.826 --> 00:01:43.956 align:middle
encontrarás un directorio start/
con el mismo código que tengo aquí,

00:01:44.626 --> 00:01:48.456 align:middle
incluido el importantísimo archivo README.md,

00:01:48.816 --> 00:01:51.566 align:middle
que contiene todos los detalles
para poner en marcha este tutorial.

00:01:52.356 --> 00:01:58.356 align:middle
El último paso es girar, abrir un terminal
en el proyecto y ejecutar symfony serve -d

00:01:58.496 --> 00:02:04.026 align:middle
para iniciar el servidor web
incorporado en https://127.0.0.1:8000.

00:02:04.896 --> 00:02:07.036 align:middle
Saluda a: ¡Treasure Connect!

00:02:07.656 --> 00:02:10.296 align:middle
Esta es la misma aplicación que
construimos en los episodios uno y dos.

00:02:11.016 --> 00:02:17.096 align:middle
He hecho algunos pequeños cambios, como arreglar
algunas imprecisiones, pero nada importante.

00:02:17.786 --> 00:02:25.496 align:middle
La página más importante es /api, donde podemos
ver nuestros dos recursos API: Tesoro y Usuario.

00:02:26.216 --> 00:02:28.546 align:middle
¡Y los hemos hecho bastante complejos!

00:02:29.016 --> 00:02:36.256 align:middle
Tenemos sub-recursos, campos personalizados,
seguridad compleja, etc. Pero, de nuevo,

00:02:36.546 --> 00:02:38.756 align:middle
tanto para DragonTreasure como para User,

00:02:39.056 --> 00:02:43.246 align:middle
el atributo #[ApiResource] está
por encima de una clase de entidad.

00:02:44.016 --> 00:02:50.566 align:middle
Dentro de un rato, volveremos a crear esta misma
configuración de la API, pero con clases dedicadas.

00:02:51.386 --> 00:02:56.636 align:middle
Antes de entrar en materia, voy a buscar
"API platform extending" para encontrar una

00:02:56.636 --> 00:02:59.586 align:middle
de mis páginas favoritas de la
documentación de la API Platform.

00:03:00.236 --> 00:03:02.596 align:middle
Responde a una pregunta sencilla pero poderosa

00:03:03.186 --> 00:03:06.766 align:middle
¿cuáles son las distintas formas en
que puedo extender la API Platform?

00:03:07.526 --> 00:03:13.526 align:middle
Por ejemplo, los procesadores de estado son la mejor forma
de ejecutar código antes o después de guardar algo:

00:03:13.826 --> 00:03:16.156 align:middle
un tema del que hablamos
en el último tutorial.

00:03:16.986 --> 00:03:20.056 align:middle
Por tanto, esta página es
genial y quiero que la conozcas.

00:03:20.456 --> 00:03:24.846 align:middle
Pero también estoy aquí para mencionar un
par de cosas de las que no vamos a hablar.

00:03:25.536 --> 00:03:30.956 align:middle
En primer lugar, no vamos a hablar de construir
operaciones con controladores personalizados.

00:03:31.556 --> 00:03:33.856 align:middle
Diablos, ¡eso ni siquiera está en esta lista!

00:03:34.586 --> 00:03:40.036 align:middle
La razón: siempre hay una forma mejor -un
punto de extensión diferente- de hacerlo. Por

00:03:40.756 --> 00:03:46.656 align:middle
ejemplo, puedes crear una operación personalizada
o incluso una clase ApiResource personalizada

00:03:46.656 --> 00:03:53.026 align:middle
con un procesador de estado que te permita hacer cualquier
trabajo extraño que necesite tu operación personalizada.

00:03:53.816 --> 00:03:58.776 align:middle
Tampoco vamos a hablar de los escuchadores
de eventos: estos eventos del núcleo.

00:03:59.356 --> 00:04:03.146 align:middle
Es por la misma razón: hay diferentes
puntos de extensión que podemos utilizar.

00:04:03.886 --> 00:04:07.996 align:middle
Estos eventos también sólo funcionan
para REST: no funcionarán para GraphQL.

00:04:08.666 --> 00:04:13.076 align:middle
Y... parece que la próxima versión
de API Platform -la versión 3.2-

00:04:13.456 --> 00:04:17.696 align:middle
podría incluso eliminar estos eventos
en favor de un nuevo sistema interno

00:04:18.086 --> 00:04:22.226 align:middle
que aproveche aún más los proveedores
de estado y los procesadores de estado.

00:04:23.086 --> 00:04:24.636 align:middle
Bien, equipo: es hora de ponerse a trabajar.

00:04:25.186 --> 00:04:27.346 align:middle
A continuación, vamos a
utilizar un proveedor de estado

00:04:27.346 --> 00:04:31.276 align:middle
para añadir un campo totalmente
personalizado a uno de nuestros recursos API.

00:04:31.756 --> 00:04:35.076 align:middle
Pero a diferencia de cuando lo
hicimos en el tutorial anterior,

00:04:35.486 --> 00:04:38.606 align:middle
este campo estará debidamente
documentado en nuestra API.
