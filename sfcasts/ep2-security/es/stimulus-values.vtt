WEBVTT

00:00:01.056 --> 00:00:03.266 align:middle
Establecer una variable global está bien.

00:00:03.266 --> 00:00:06.326 align:middle
Pero si utilizas Stimulus, hay una forma mejor.

00:00:06.686 --> 00:00:10.956 align:middle
Podemos pasar datos del servidor como
un valor a un controlador Stimulus.

00:00:11.536 --> 00:00:13.766 align:middle
Por supuesto, esto es una aplicación Vue.

00:00:14.276 --> 00:00:17.796 align:middle
Pero si miras en
templates/main/homepage.html.twig , estamos

00:00:18.306 --> 00:00:23.976 align:middle
utilizando el paquete symfony/ux-vue
para renderizar esto: Entre bastidores,

00:00:24.206 --> 00:00:29.506 align:middle
eso activa un pequeño controlador Stimulus
que inicia y renderiza el componente Vue.

00:00:30.116 --> 00:00:34.986 align:middle
Cualquier argumento que pasemos aquí se
envía al controlador Stimulus como valor...

00:00:35.296 --> 00:00:38.616 align:middle
y luego se envían como
props a la aplicación Vue.

00:00:39.376 --> 00:00:44.346 align:middle
Lo que vamos a hacer es "más o menos" específico
de Vue, pero podrías utilizar esta estrategia

00:00:44.346 --> 00:00:46.916 align:middle
para pasar valores a cualquier
controlador Stimulus.

00:00:47.716 --> 00:00:52.916 align:middle
Primero, en el componente Vue, vamos a permitir
que se pase una nueva prop llamada user:

00:00:53.626 --> 00:00:57.576 align:middle
Si no utilizas Vue, no te preocupes
demasiado por los detalles.

00:00:58.336 --> 00:01:01.386 align:middle
Para asegurarnos de que llega
aquí console.log(props.user).

00:01:01.876 --> 00:01:07.586 align:middle
E inicializa los datos en props.user:
A continuación , en base.html.twig,

00:01:07.936 --> 00:01:15.086 align:middle
quita todo eso de window.user : Y en
homepage.html.twig, pasa una nueva prop user establecida

00:01:15.086 --> 00:01:21.636 align:middle
en app.user: Ahora, si te mueves
y actualizas, ¿no funciona?

00:01:22.106 --> 00:01:24.646 align:middle
Parece que estamos autentificados como...

00:01:24.906 --> 00:01:32.046 align:middle
¿nada? Si indagas un poco, verás que estamos
enviando el user a Stimulus como {} vacío .

00:01:32.746 --> 00:01:39.546 align:middle
¿Por qué? Porque cuando envías datos a Stimulus ,
éste no utiliza el serializador para transformarlos

00:01:39.546 --> 00:01:42.496 align:middle
en JSON: sólo utiliza json_encode().

00:01:43.096 --> 00:01:44.716 align:middle
Y eso no es suficiente.

00:01:45.346 --> 00:01:47.746 align:middle
Así que tenemos que
serializarlo nosotros mismos.

00:01:48.576 --> 00:01:52.726 align:middle
Para ello, abre
src/Controller/MainController.php.

00:01:52.726 --> 00:01:54.886 align:middle
Aquí está el controlador
que renderiza esa plantilla.

00:01:55.536 --> 00:02:01.176 align:middle
Autocablea un servicio llamado
NormalizerInterface y luego pasa una variable

00:02:01.176 --> 00:02:06.616 align:middle
a nuestra plantilla llamada userData
ajustada a $normalizer->normalize().

00:02:07.406 --> 00:02:08.966 align:middle
Oh, ¡pero necesitamos al usuario! Añade

00:02:09.586 --> 00:02:14.436 align:middle
otro argumento al controlador con
el nuevo atributo #[CurrentUser],

00:02:14.776 --> 00:02:20.646 align:middle
type-hint User, digamos $user, y luego =
null en caso de que no estemos autenticados.

00:02:21.246 --> 00:02:25.786 align:middle
Más abajo, la normalización
convertirá el objeto en una matriz.

00:02:26.036 --> 00:02:34.216 align:middle
Así que pasa $user y luego el formato de la matriz,
que es jsonld: queremos todos los campos JSON- LD.

00:02:35.016 --> 00:02:42.236 align:middle
Por último, pasa el contexto de serialización
con 'groups' => 'user:read': ¡Último paso!

00:02:42.856 --> 00:02:50.176 align:middle
En la plantilla, establece la propiedad user en
userData: Ya que el sistema Stimulus ejecutará esa

00:02:50.176 --> 00:02:54.286 align:middle
matriz a través de json_encode()
que transformará esa matriz en JSON.

00:02:54.916 --> 00:02:56.966 align:middle
Cuando pasemos y actualicemos ....

00:02:57.836 --> 00:03:02.926 align:middle
¡ya lo tienes! Puedes ver que todo el
JSON se pasa al controlador Stimulus...

00:03:03.216 --> 00:03:05.666 align:middle
y luego se pasa a Vue como prop.

00:03:06.546 --> 00:03:10.476 align:middle
Vuelve a girar y asegúrate de
sacar ese console.log() de ahí:

00:03:11.446 --> 00:03:15.356 align:middle
Todavía no lo hemos visto, pero cuando
empecemos a hacer peticiones a nuestra API,

00:03:15.886 --> 00:03:19.886 align:middle
esas peticiones se autenticarán
gracias a la sesión.

00:03:20.606 --> 00:03:26.366 align:middle
Cuando utilices sesiones con tu API, puede
que leas que necesitas protección CSRF.

00:03:26.986 --> 00:03:29.716 align:middle
¿Necesitamos tokens CSRF?

00:03:30.346 --> 00:03:32.836 align:middle
La respuesta rápida es: probablemente no.

00:03:33.366 --> 00:03:38.786 align:middle
Mientras utilices algo llamado cookies
SameSite - que son automáticas en Symfony -

00:03:39.136 --> 00:03:43.486 align:middle
entonces tu API probablemente no necesite
preocuparse por la protección CSRF.

00:03:44.086 --> 00:03:46.166 align:middle
Pero ten en cuenta dos cosas.

00:03:46.646 --> 00:03:51.496 align:middle
En primer lugar, asegúrate de que tus
peticiones GET no tienen efectos secundarios.

00:03:52.076 --> 00:03:57.246 align:middle
No hagas algo tonto como permitir que el
cliente de la API haga una petición GET...

00:03:57.706 --> 00:04:00.526 align:middle
pero luego guarde algo en la base de datos.

00:04:01.196 --> 00:04:07.456 align:middle
En segundo lugar, algunos navegadores antiguos
-como IE 11- no admiten cookies SameSite.

00:04:07.756 --> 00:04:13.946 align:middle
Así que al renunciar a los tokens CSRF, podrías estar
permitiendo que un pequeño porcentaje de tus usuarios

00:04:14.056 --> 00:04:17.186 align:middle
sean susceptibles de sufrir
ataques CSRF. Si quieres

00:04:18.006 --> 00:04:22.306 align:middle
saber más, nuestro tutorial sobre la
API Platform 2 tiene un capítulo entero

00:04:22.306 --> 00:04:25.276 align:middle
sobre las cookies SameSite y los tokens CSRF.

00:04:26.126 --> 00:04:31.016 align:middle
A continuación, pasemos al otro caso de
uso de la autenticación: Los tokens API.
