WEBVTT

00:00:01.146 --> 00:00:05.076 align:middle
La propiedad más importante de
ApiToken es la cadena del token...

00:00:05.256 --> 00:00:06.676 align:middle
que debe ser algo aleatorio.

00:00:07.566 --> 00:00:13.326 align:middle
Crea un método constructor con un argumento
string $tokenType: Esto no es obligatorio,

00:00:13.386 --> 00:00:18.446 align:middle
pero GitHub ha dado con algo ingenioso:
como tienen diferentes tipos de tokens,

00:00:18.446 --> 00:00:24.606 align:middle
como tokens de acceso personal y tokens OAuth,
dan a cada tipo de token su propio prefijo.

00:00:24.606 --> 00:00:27.336 align:middle
Esto ayuda a saber de dónde viene cada uno.

00:00:27.846 --> 00:00:31.106 align:middle
Nosotros sólo vamos a tener un
tipo, pero seguiremos la idea.

00:00:31.886 --> 00:00:41.486 align:middle
En la parte superior, para almacenar el prefijo del tipo,
añade private const PERSONAL_ACCESS_TOKEN_PREFIX = 'tcp_':

00:00:41.486 --> 00:00:41.746 align:middle
I...

00:00:41.926 --> 00:00:43.746 align:middle
me acabo de inventar ese prefijo.

00:00:44.006 --> 00:00:46.196 align:middle
Nuestro sitio se llama Treasure Connect...

00:00:46.196 --> 00:00:50.686 align:middle
y éste es un token de acceso
personal, así que tcp_.

00:00:51.786 --> 00:00:57.426 align:middle
A continuación, para string $tokenType = pon
por defecto self::PERSONAL_ACCESS_TOKEN_PREFIX:

00:00:57.426 --> 00:01:02.896 align:middle
Para el token en sí, digamos
$this->token = $tokenType.

00:01:03.006 --> 00:01:08.196 align:middle
y luego usaré un código que generará
una cadena aleatoria de 64 caracteres:

00:01:08.236 --> 00:01:13.496 align:middle
Así que aquí hay 64 caracteres más
el prefijo de 4 caracteres, igual a 68.

00:01:13.846 --> 00:01:16.076 align:middle
Por eso he elegido esa longitud.

00:01:16.076 --> 00:01:18.386 align:middle
Y como estamos configurando
el $token en el constructor,

00:01:18.646 --> 00:01:21.896 align:middle
esto ya no necesita = null ni ser anulable.

00:01:22.176 --> 00:01:23.636 align:middle
Siempre será un string.

00:01:24.516 --> 00:01:26.386 align:middle
¡Vale! ¡Ya está configurado!

00:01:26.866 --> 00:01:29.466 align:middle
Así que vamos a añadir algunos
tokens API a la base de datos.

00:01:30.086 --> 00:01:31.596 align:middle
En tu terminal, ejecuta php ./bin/console

00:01:31.596 --> 00:01:36.736 align:middle
make:factory para que podamos generar una
fábrica Foundry para ApiToken. Echa un

00:01:37.546 --> 00:01:42.896 align:middle
vistazo a la nueva clase:
src/Factory/ApiTokenFactory.php. Abajo,

00:01:42.896 --> 00:01:48.486 align:middle
en getDefaults(): Esto se ve bien en su mayor
parte, aunque no necesitamos pasar el token. Ah,

00:01:49.086 --> 00:01:54.126 align:middle
y quiero modificar los ámbitos: Normalmente,
cuando creas un token de acceso -ya sea

00:01:54.356 --> 00:02:00.026 align:middle
un token de acceso personal o uno creado
a través de OAuth- puedes elegir qué

00:02:00.026 --> 00:02:02.006 align:middle
permisos tendrá ese token:

00:02:02.626 --> 00:02:07.236 align:middle
no tiene automáticamente todos los permisos
que tendría un usuario normal. También quiero

00:02:07.486 --> 00:02:10.106 align:middle
añadir eso a nuestro sistema. De vuelta a

00:02:10.886 --> 00:02:16.566 align:middle
ApiToken, en la parte superior, después de la
primera constante, pegaré algunas más: Esto

00:02:17.286 --> 00:02:19.826 align:middle
define tres ámbitos diferentes
que puede tener un token. No son

00:02:20.386 --> 00:02:25.206 align:middle
todos los ámbitos que podríamos imaginar, pero son
suficientes para que las cosas sean realistas. Así,

00:02:25.206 --> 00:02:30.216 align:middle
cuando creas un token, puedes elegir
si ese token debe tener permiso para

00:02:30.216 --> 00:02:35.526 align:middle
editar los datos del usuario, o si puede
crear tesoros en nombre del usuario o

00:02:35.756 --> 00:02:38.936 align:middle
si puede editar tesoros en nombre del usuario.

00:02:39.316 --> 00:02:45.616 align:middle
También he añadido un public const SCOPES para describirlos:
De vuelta a nuestro ApiTokenFactory , vamos a dar , por

00:02:45.986 --> 00:02:52.766 align:middle
defecto, a cada ApiToken dos de esos
tres ámbitos: ¡Vale! ApiTokenFactory

00:02:53.026 --> 00:02:55.076 align:middle
ya está listo. Último

00:02:55.646 --> 00:03:01.216 align:middle
paso: abre AppFixtures para que podamos
crear algunos ámbitos ApiToken.

00:03:01.826 --> 00:03:08.236 align:middle
Quiero asegurarme de que, en nuestros datos ficticios,
cada usuario tiene al menos uno o dos tokens de API. Una

00:03:08.236 --> 00:03:15.266 align:middle
forma fácil de hacerlo, aquí abajo, es
decir ApiTokenFactory::createMany(). Como

00:03:15.826 --> 00:03:19.356 align:middle
tenemos 10 usuarios, vamos
a crear 30 tokens. Luego le

00:03:20.126 --> 00:03:25.976 align:middle
pasamos una función de devolución de llamada y, dentro,
devolvemos una anulación de los datos por defecto. Vamos a

00:03:27.106 --> 00:03:31.866 align:middle
sustituir ownedBy por UserFactory::random():

00:03:32.716 --> 00:03:37.696 align:middle
Esto creará 30 tokens y los asignará
aleatoriamente a los 10, bueno

00:03:37.986 --> 00:03:40.876 align:middle
en realidad 11, usuarios de
la base de datos. Así que

00:03:41.376 --> 00:03:45.996 align:middle
, de media, cada usuario debería tener
asignados unos tres tokens API. Hago

00:03:46.556 --> 00:03:51.606 align:middle
esto porque, para simplificar las cosas, no
vamos a crear una interfaz de usuario en la que

00:03:51.786 --> 00:03:56.676 align:middle
el usuario pueda hacer clic y crear tokens
de acceso y seleccionar ámbitos. Vamos a

00:03:57.086 --> 00:03:58.546 align:middle
saltarnos todo eso. En lugar de eso,

00:03:59.256 --> 00:04:05.576 align:middle
como cada usuario ya tendrá algunos tokens de la
API en la base de datos, podemos pasar directamente a

00:04:05.576 --> 00:04:08.436 align:middle
aprender a leer y validar esos tokens. Recarga

00:04:09.126 --> 00:04:14.676 align:middle
los accesorios con: symfony console
doctrine:fixtures:load Y... ¡precioso!

00:04:15.036 --> 00:04:15.826 align:middle
Pero

00:04:16.316 --> 00:04:19.856 align:middle
como no vamos a construir una
interfaz para crear tokens, al

00:04:20.186 --> 00:04:23.826 align:middle
menos necesitamos una forma fácil de
ver los tokens de un usuario ... para

00:04:23.826 --> 00:04:25.646 align:middle
poder probarlos en nuestra API. Cuando estemos

00:04:26.586 --> 00:04:29.826 align:middle
autenticados, podemos mostrarlos aquí. No es

00:04:30.706 --> 00:04:34.116 align:middle
un detalle muy importante, así
que lo haré rápidamente. En

00:04:34.756 --> 00:04:39.246 align:middle
User, en la parte inferior, pegaré
una función que devuelva una matriz de

00:04:39.246 --> 00:04:46.766 align:middle
las cadenas de token de API válidas para este usuario: En
ApiToken, también necesitamos un método isValid()... así que

00:04:47.026 --> 00:04:52.546 align:middle
también lo pegaré: Puedes obtener todo esto de los
bloques de código de esta página. A continuación,

00:04:54.016 --> 00:04:58.136 align:middle
abre assets/vue/controllers/TreasureConnectApp.vue...
y añade

00:04:58.926 --> 00:05:03.746 align:middle
una nueva prop que se pueda pasar:
tokens: Gracias a eso, tendremos

00:05:04.086 --> 00:05:06.616 align:middle
una nueva variable tokens en
la plantilla. Después del

00:05:06.616 --> 00:05:12.246 align:middle
enlace "Cerrar sesión", pegaré un código que los muestre:
Último paso: abrir templates/main/homepage.html.twig.

00:05:12.606 --> 00:05:15.676 align:middle
Aquí es

00:05:16.346 --> 00:05:19.006 align:middle
donde pasaremos props a nuestra
aplicación Vue. Pásale

00:05:19.616 --> 00:05:23.656 align:middle
uno nuevo llamado tokens establecido en, if
app.user, then app.user.validTokenStrings,

00:05:24.016 --> 00:05:30.106 align:middle
else null: ¡Probemos esto! Si

00:05:30.526 --> 00:05:33.996 align:middle
actualizamos, ahora mismo no
estamos conectados. Utiliza nuestros

00:05:34.516 --> 00:05:36.106 align:middle
enlaces tramposos para
iniciar sesión. Observa que

00:05:36.106 --> 00:05:40.206 align:middle
no los muestra inmediatamente... podríamos

00:05:40.616 --> 00:05:42.806 align:middle
mejorar nuestro código
para que lo hiciera... pero

00:05:43.086 --> 00:05:44.366 align:middle
no es gran cosa. Actualiza y...

00:05:45.026 --> 00:05:46.146 align:middle
¡ahí

00:05:46.556 --> 00:05:47.276 align:middle
están! ¡ Tenemos

00:05:47.656 --> 00:05:49.266 align:middle
dos fichas! Siguiente paso: vamos a

00:05:50.166 --> 00:05:53.506 align:middle
escribir un sistema para que pueda
leer estos tokens y autenticar

00:05:53.506 --> 00:05:57.066 align:middle
al usuario en lugar de utilizar
la autenticación de sesión.
