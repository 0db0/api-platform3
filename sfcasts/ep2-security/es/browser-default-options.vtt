WEBVTT

00:00:01.106 --> 00:00:02.146 align:middle
Nuestra prueba funciona...

00:00:02.206 --> 00:00:06.606 align:middle
pero la API nos devuelve JSON, no JSON-LD.

00:00:07.006 --> 00:00:12.866 align:middle
¿Por qué? Cuando hicimos antes la petición
a GET, no incluimos una cabecera Accept

00:00:12.866 --> 00:00:15.566 align:middle
para indicar qué formato queríamos de vuelta.

00:00:15.996 --> 00:00:20.986 align:middle
Pero... JSON-LD es el formato por defecto de
nuestra API, así que nos lo devolvió. Sin

00:00:21.516 --> 00:00:25.356 align:middle
embargo, cuando hacemos una petición
a ->post() con la clave json,

00:00:25.476 --> 00:00:31.146 align:middle
eso añade una cabecera Content-Type establecida
en application/json -lo que está bien-,

00:00:31.246 --> 00:00:35.226 align:middle
pero también añade una cabecera
Accept establecida en application/json.

00:00:35.786 --> 00:00:41.386 align:middle
Sí, le estamos diciendo al servidor
que queremos JSON plano, no JSON-LD.

00:00:41.386 --> 00:00:44.116 align:middle
Quiero utilizar JSON-LD en todas partes.

00:00:44.556 --> 00:00:45.426 align:middle
¿Cómo podemos hacerlo?

00:00:46.006 --> 00:00:52.206 align:middle
El segundo argumento de ->post() puede ser
una matriz o un objeto llamado HttpOptions.

00:00:52.686 --> 00:00:55.446 align:middle
Di HttpOptions::json()...

00:00:55.736 --> 00:00:58.206 align:middle
y luego pasar el array directamente.

00:00:58.826 --> 00:01:05.186 align:middle
A ver... si entiendo bien la sintaxis: Hasta aquí,
esto es equivalente a lo que teníamos antes.

00:01:05.786 --> 00:01:10.666 align:middle
Pero ahora podemos cambiar algunas opciones
diciendo ->withHeader() pasando Accept

00:01:11.026 --> 00:01:16.636 align:middle
y application/ld+json: También
podríamos haberlo hecho con el array

00:01:16.636 --> 00:01:19.226 align:middle
de opciones: tiene una clave llamada headers.

00:01:19.396 --> 00:01:20.836 align:middle
Pero el objeto está muy bien.

00:01:21.686 --> 00:01:23.256 align:middle
Asegurémonos de que esto arregla las cosas.

00:01:23.556 --> 00:01:25.766 align:middle
Ejecuta la prueba: Y...

00:01:26.166 --> 00:01:27.876 align:middle
¡volvemos a JSON-LD! Tiene

00:01:27.876 --> 00:01:29.986 align:middle
los campos correctos

00:01:30.376 --> 00:01:35.416 align:middle
y la cabecera de respuesta
application/ld+json Content-Type .

00:01:35.946 --> 00:01:37.866 align:middle
Así que .... está bien...

00:01:37.866 --> 00:01:43.246 align:middle
pero hacer esto cada vez que hacemos una
petición a nuestra API en las pruebas es...

00:01:43.246 --> 00:01:44.486 align:middle
mega cutre.

00:01:45.086 --> 00:01:47.006 align:middle
Necesitamos que esto ocurra automáticamente.

00:01:47.786 --> 00:01:51.196 align:middle
Una buena forma de hacerlo es
aprovechar una clase base de prueba.

00:01:51.676 --> 00:01:55.456 align:middle
Dentro de tests/, en realidad
dentro de tests/Functional/,

00:01:55.906 --> 00:01:58.716 align:middle
crea una nueva clase PHP llamada ApiTestCase.

00:01:58.906 --> 00:02:03.646 align:middle
La llamaré abstract y
extenderé KernelTestCase:

00:02:05.186 --> 00:02:07.576 align:middle
Dentro, añade el rasgo HasBrowser.

00:02:07.576 --> 00:02:12.956 align:middle
Pero vamos a hacer algo astuto:
vamos a importar el método browser()

00:02:13.106 --> 00:02:18.666 align:middle
pero lo llamaremos baseKernelBrowser:
¿Por qué demonios hacemos eso?

00:02:19.106 --> 00:02:21.016 align:middle
Reimplementa el método browser()...

00:02:22.416 --> 00:02:27.476 align:middle
y luego llama a $this->baseKernelBrowser()
pasándole $options y $server.

00:02:28.296 --> 00:02:33.916 align:middle
Pero ahora llama a otro método:
->setDefaultHttpOptions() . Pásale

00:02:34.346 --> 00:02:39.766 align:middle
HttpOptions::create() y
luego ->withHeader(),

00:02:40.166 --> 00:02:46.086 align:middle
Accept, application/ld+json: ¡Listo!

00:02:46.656 --> 00:02:54.116 align:middle
De vuelta en nuestra clase de prueba real, extiende
ApiTestCase: coge el que es de nuestra app: ¡Ya está!

00:02:54.116 --> 00:02:58.456 align:middle
Cuando decimos $this->browser(),
ahora llama a nuestro método browser(),

00:02:58.596 --> 00:03:00.646 align:middle
que cambia esa opción por defecto.

00:03:01.936 --> 00:03:04.026 align:middle
Celébralo eliminando withHeader()...

00:03:04.586 --> 00:03:09.116 align:middle
y puedes volver a la matriz de
opciones con una tecla json si quieres.

00:03:09.916 --> 00:03:11.226 align:middle
Vamos a probarlo.

00:03:11.226 --> 00:03:12.236 align:middle
Y... uh oh.

00:03:12.616 --> 00:03:19.156 align:middle
Es un error extraño: No se puede anular el
método final _resetBrowserClients() Esto...

00:03:19.226 --> 00:03:24.276 align:middle
se debe a que estamos importando el trait
de la clase padre y de nuestra clase...

00:03:24.406 --> 00:03:26.366 align:middle
lo que hace que el trait se vuelva loco.

00:03:26.876 --> 00:03:30.606 align:middle
Elimina el que está dentro de nuestra
clase de prueba: ya no lo necesitamos.

00:03:31.186 --> 00:03:33.916 align:middle
También haré una pequeña
limpieza en mis sentencias use.

00:03:35.076 --> 00:03:37.916 align:middle
Y ya está: ¡Lo tengo!

00:03:38.236 --> 00:03:41.626 align:middle
Volvemos a tener JSON-LD
con cero trabajo extra.

00:03:42.586 --> 00:03:49.866 align:middle
Elimina ese dump(): A continuación: vamos a escribir otra
prueba que utilice nuestro token de autenticación de la API.
