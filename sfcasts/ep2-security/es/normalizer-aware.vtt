WEBVTT

00:00:01.056 --> 00:00:07.436 align:middle
Nuestra misión es clara: configurar nuestro normalizador para que
decore el servicio normalizador del núcleo de Symfony , de modo que

00:00:07.666 --> 00:00:11.156 align:middle
podamos añadir el grupo
owner:read cuando sea necesario

00:00:11.416 --> 00:00:13.996 align:middle
y luego llamar al normalizador decorado.

00:00:14.466 --> 00:00:15.596 align:middle
¡Y sabemos de decoración!

00:00:16.056 --> 00:00:21.466 align:middle
Añade public function __construct() con
private NormalizerInterface $normalizer:

00:00:22.856 --> 00:00:31.906 align:middle
Abajo en normalize(), añade un dump() luego return
$this->normalizer->normalize() pasando $object

00:00:32.076 --> 00:00:33.636 align:middle
$format, y $context.

00:00:34.886 --> 00:00:39.846 align:middle
Para supportsNormalization(), haz lo
mismo: llama a supportsNormalization()

00:00:39.846 --> 00:00:42.556 align:middle
en la clase decorada y pasa los args:

00:00:44.186 --> 00:00:47.606 align:middle
Para completar la decoración, dirígete
a la parte superior de la clase.

00:00:48.316 --> 00:00:50.566 align:middle
Quitaré algunas declaraciones
antiguas de use...

00:00:51.326 --> 00:00:58.126 align:middle
y luego diré #[AsDecorator] pasando serializer,
que ya he mencionado que es el id de servicio

00:00:58.126 --> 00:01:02.026 align:middle
para el normalizador principal
de nivel superior: ¡Vale!

00:01:02.386 --> 00:01:04.206 align:middle
Aún no hemos hecho ningún cambio...

00:01:04.296 --> 00:01:07.066 align:middle
así que deberíamos seguir
viendo la única prueba que falla.

00:01:07.486 --> 00:01:09.926 align:middle
Pruébalo: ¡Woh!

00:01:09.926 --> 00:01:11.376 align:middle
¡Una explosión!

00:01:11.986 --> 00:01:17.706 align:middle
Vaya. ValidationExceptionListener::__construct()
: El argumento nº 1 ($serializer) debe ser

00:01:17.706 --> 00:01:22.036 align:middle
del tipo SerializerInterface,
AddOwnerGroupsNormalizer dado.

00:01:22.856 --> 00:01:27.396 align:middle
¿Vale? Cuando añadimos
#[AsDecorator('serializer')],

00:01:27.766 --> 00:01:32.326 align:middle
significa que nuestro servicio sustituye
al servicio conocido como serializer.

00:01:32.956 --> 00:01:38.936 align:middle
Así, a todos los que dependen del
servicio serializer se nos pasará ahora...

00:01:39.306 --> 00:01:42.896 align:middle
y luego el serializer original
se pasa a nuestro constructor.

00:01:43.576 --> 00:01:44.926 align:middle
Entonces, ¿cuál es el problema?

00:01:45.406 --> 00:01:47.676 align:middle
La decoración ya ha funcionado varias veces.

00:01:48.236 --> 00:01:52.076 align:middle
El problema es que el servicio
serializer en Symfony es...

00:01:52.366 --> 00:01:53.336 align:middle
un poco grande. Implementa

00:01:54.036 --> 00:01:59.616 align:middle
NormalizerInterface, ¡pero también
DenormalizerInterface, EncoderInterface,

00:01:59.616 --> 00:02:02.776 align:middle
DecoderInterface y SerializerInterface !

00:02:03.116 --> 00:02:06.096 align:middle
Pero nuestro objeto sólo
implementa uno de ellos.

00:02:06.526 --> 00:02:12.546 align:middle
Y así, cuando nuestra clase se pasa
a algo que espera un objeto con una

00:02:12.546 --> 00:02:15.816 align:middle
de esas otras 4 interfaces, explota.

00:02:16.606 --> 00:02:19.896 align:middle
Si realmente quisiéramos
decorar el servicio serializer,

00:02:20.256 --> 00:02:23.966 align:middle
tendríamos que implementar
las cinco interfaces...

00:02:24.266 --> 00:02:26.756 align:middle
lo cual es feo y demasiado.

00:02:27.356 --> 00:02:28.066 align:middle
¡Y eso está bien!

00:02:28.556 --> 00:02:34.266 align:middle
En lugar de decorar el nivel superior normalizer,
vamos a decorar un normalizador concreto:

00:02:34.716 --> 00:02:40.366 align:middle
el que se encarga de normalizar
los objetos ApiResource en JSON-LD.

00:02:41.156 --> 00:02:43.916 align:middle
Éste es otro punto en el que
puedes confiar en la documentación

00:02:43.916 --> 00:02:46.536 align:middle
para que te dé el ID de
servicio exacto que necesitas.

00:02:47.146 --> 00:02:53.996 align:middle
Es api_platform.jsonld.normalizer.item:
Prueba de nuevo:

00:02:54.386 --> 00:02:58.606 align:middle
testOwnerCanSeeIsPublishedField ¡Sí!

00:02:58.726 --> 00:03:00.276 align:middle
¡Vemos nuestro volcado!

00:03:00.716 --> 00:03:02.866 align:middle
Y... ¿un error 400?

00:03:03.466 --> 00:03:05.756 align:middle
Déjame abrir la respuesta
para que podamos verla.

00:03:07.786 --> 00:03:13.976 align:middle
Extraño: El serializador inyectado debe
ser una instancia de NormalizerInterface.

00:03:14.456 --> 00:03:19.086 align:middle
Y viene de lo más profundo del código
del serializador de API Platform.

00:03:20.546 --> 00:03:25.146 align:middle
Así que... decorar normalizadores
no es un proceso muy amigable.

00:03:25.466 --> 00:03:28.266 align:middle
Está bien documentado, pero es raro.

00:03:29.016 --> 00:03:35.036 align:middle
Cuando decoras este normalizador específico, también
tienes que implementar SerializerAwareInterface.

00:03:35.516 --> 00:03:39.636 align:middle
Y eso va a requerir que tengas
un método setSerializer().

00:03:40.376 --> 00:03:42.776 align:middle
Oh, déjame importar esa declaración use:

00:03:42.776 --> 00:03:47.166 align:middle
No sé por qué no ha aparecido
automáticamente: Ya está.

00:03:48.296 --> 00:03:54.106 align:middle
Dentro, digamos, si $this->normalizer
es un instanceof SerializerAwareInterface,

00:03:54.496 --> 00:03:59.026 align:middle
entonces llama a
$this->normalizer->setSerializer($serializer):

00:03:59.886 --> 00:04:02.656 align:middle
Ni siquiera quiero entrar
en los detalles de esto:

00:04:02.966 --> 00:04:07.716 align:middle
ocurre que el normalizador que estamos
decorando implementa otra interfaz...

00:04:08.036 --> 00:04:11.626 align:middle
así que también tenemos que implementarla.

00:04:11.626 --> 00:04:12.836 align:middle
Intentémoslo de nuevo.

00:04:14.256 --> 00:04:18.806 align:middle
Por fin tenemos el volcado y falla
la aserción que esperamos...

00:04:19.086 --> 00:04:20.976 align:middle
ya que aún no hemos añadido el grupo.

00:04:21.926 --> 00:04:22.646 align:middle
¡Hagámoslo!

00:04:23.186 --> 00:04:26.386 align:middle
Recuerda el objetivo: si somos propietarios
de este DragonTreasure , queremos añadir

00:04:26.586 --> 00:04:29.336 align:middle
el grupo owner:read.

00:04:30.126 --> 00:04:37.416 align:middle
En el constructor, autoconecta el servicio
Security como una propiedad: Entonces, aquí abajo,

00:04:38.686 --> 00:04:43.916 align:middle
si $object es un instanceof DragonTreasure
-porque este método se llamará para todas

00:04:43.916 --> 00:04:45.586 align:middle
nuestras clases de recursos API-

00:04:46.056 --> 00:04:51.816 align:middle
y $this->security->getUser()
es igual a $object->getOwner()

00:04:54.286 --> 00:05:01.446 align:middle
, entonces llama a $context['groups'][]
para añadir owner:read: ¡Uf!

00:05:01.986 --> 00:05:07.026 align:middle
Intenta esa prueba una vez
más: ¡Lo hemos conseguido!

00:05:07.456 --> 00:05:11.656 align:middle
Ahora podemos devolver diferentes
campos objeto por objeto. Si quieres

00:05:12.386 --> 00:05:16.856 align:middle
añadir también owner:write
durante la desnormalización,

00:05:17.126 --> 00:05:19.156 align:middle
necesitarías implementar una segunda interfaz.

00:05:19.636 --> 00:05:21.396 align:middle
No voy a hacerlo entero...

00:05:21.716 --> 00:05:24.306 align:middle
pero implementarías DenormalizerInterface,

00:05:24.626 --> 00:05:32.566 align:middle
añadirías los dos métodos necesarios,
llamarías al servicio decorado...

00:05:33.096 --> 00:05:39.816 align:middle
y cambiar el argumento para que sea un tipo de unión
de NormalizerInterface y DenormalizerInterface.

00:05:41.646 --> 00:05:46.146 align:middle
Por último, el servicio que estás decorando
para la desnormalización es diferente:

00:05:46.446 --> 00:05:49.936 align:middle
es api_platform.serializer.normalizer.item. Sin

00:05:50.656 --> 00:05:56.726 align:middle
embargo, si quieres decorar tanto el normalizador
como el desnormalizador en la misma clase, tendrías

00:05:57.086 --> 00:06:03.136 align:middle
que eliminar #[AsDecorator] y mover la
configuración de la decoración a services.yaml...

00:06:03.646 --> 00:06:07.346 align:middle
porque un mismo servicio no
puede decorar dos cosas a la vez.

00:06:07.786 --> 00:06:10.006 align:middle
API Platform lo explica en sus documentos.

00:06:10.926 --> 00:06:13.276 align:middle
Vale, voy a deshacer todo eso...

00:06:13.736 --> 00:06:16.936 align:middle
y limitarme a añadir owner:read.

00:06:17.786 --> 00:06:23.216 align:middle
Siguiente: ahora que tenemos un normalizador
personalizado, podemos hacer fácilmente locuras

00:06:23.276 --> 00:06:28.716 align:middle
como añadir a nuestra API un campo totalmente
personalizado que no existe en nuestra clase.
