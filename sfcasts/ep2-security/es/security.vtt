WEBVTT

00:00:01.136 --> 00:00:07.486 align:middle
Acabamos de hablar mucho sobre la autenticación:
es la forma de decirle a la API quiénes somos.

00:00:08.146 --> 00:00:13.246 align:middle
Ahora pasamos a la autorización, que consiste
en denegar el acceso a determinadas operaciones

00:00:13.396 --> 00:00:15.866 align:middle
y otras cosas en función de quién eres.

00:00:16.456 --> 00:00:18.966 align:middle
Hay múltiples formas de
controlar el acceso a algo.

00:00:19.446 --> 00:00:22.596 align:middle
La más sencilla es en
config/packages/security.yaml.

00:00:23.316 --> 00:00:29.296 align:middle
Igual que en la seguridad normal de Symfony,
aquí abajo tenemos una sección access_control:

00:00:29.856 --> 00:00:35.206 align:middle
Si quieres bloquear un patrón de URL específico
por un rol específico, utiliza access_control.

00:00:35.916 --> 00:00:41.666 align:middle
Podrías usar esto, por ejemplo, para requerir que el
usuario tenga un rol para usar cualquier cosa en tu API

00:00:42.246 --> 00:00:45.286 align:middle
apuntando a URLs que empiecen por /api.

00:00:46.186 --> 00:00:50.436 align:middle
En una aplicación web tradicional,
utilizo access_control para varias cosas.

00:00:50.756 --> 00:00:55.536 align:middle
Pero la mayoría de las veces pongo mis reglas
de autorización dentro de los controladores.

00:00:56.156 --> 00:01:01.106 align:middle
Pero... por supuesto, con API
Platform, no tenemos controladores.

00:01:01.656 --> 00:01:06.036 align:middle
Todo lo que tenemos son clases de
recursos API, como DragonTreasure.

00:01:06.786 --> 00:01:09.436 align:middle
Así que en lugar de poner las reglas
de seguridad en los controladores,

00:01:09.676 --> 00:01:12.486 align:middle
las adjuntaremos a nuestras operaciones.

00:01:13.086 --> 00:01:15.596 align:middle
Por ejemplo, hagamos que la petición POST

00:01:15.596 --> 00:01:19.466 align:middle
para crear un nuevo DragonTreasure
requiera que el usuario esté autenticado.

00:01:20.086 --> 00:01:23.426 align:middle
Para ello añadiremos una
opción muy útil security.

00:01:23.946 --> 00:01:27.836 align:middle
Establécela como una cadena y
dentro de, digamos is_granted(),

00:01:28.526 --> 00:01:35.186 align:middle
comillas dobles y luego ROLE_TREASURE_CREATE:
Podríamos utilizar simplemente ROLE_USER aquí

00:01:35.426 --> 00:01:38.366 align:middle
si sólo quisiéramos asegurarnos de
que el usuario ha iniciado sesión.

00:01:38.636 --> 00:01:43.026 align:middle
Pero tenemos un sistema genial en el que, si
utilizas un token de API para la autenticación,

00:01:43.316 --> 00:01:45.636 align:middle
ese token tendrá ámbitos específicos.

00:01:46.116 --> 00:01:49.176 align:middle
Un ámbito posible se llama
SCOPE_TREASURE_CREATE...

00:01:49.686 --> 00:01:51.906 align:middle
que corresponde a ROLE_TREASURE_CREATE.

00:01:52.126 --> 00:01:53.866 align:middle
Así que lo buscamos.

00:01:54.466 --> 00:01:57.886 align:middle
Además, en security.yaml,
a través de role_hierarchy,

00:01:58.136 --> 00:02:02.156 align:middle
si inicias sesión a través del formulario de
inicio de sesión, obtienes ROLE_FULL_USER...

00:02:02.436 --> 00:02:05.466 align:middle
y automáticamente obtendrás
también ROLE_TREASURE_CREATE . En

00:02:06.156 --> 00:02:11.916 align:middle
otras palabras, al utilizar ROLE_TREASURE_CREATE, se te concederá el
acceso porque te has conectado a través del formulario de inicio de sesión

00:02:11.916 --> 00:02:17.706 align:middle
o te has autenticado utilizando un
token de API que tiene ese alcance.

00:02:18.586 --> 00:02:19.666 align:middle
Vamos a probarlo.

00:02:20.156 --> 00:02:21.466 align:middle
Asegúrate de que has cerrado la sesión.

00:02:22.026 --> 00:02:22.716 align:middle
Voy a actualizar.

00:02:23.336 --> 00:02:27.066 align:middle
Sí, puedes ver en la barra de herramientas de
depuración web que no he iniciado sesión...

00:02:27.576 --> 00:02:30.796 align:middle
y Swagger no tiene actualmente un token de API.

00:02:31.836 --> 00:02:33.476 align:middle
Vamos a probar la ruta POST.

00:02:34.156 --> 00:02:34.676 align:middle
Pruébalo..

00:02:35.196 --> 00:02:38.066 align:middle
y... ejecuta con los datos del ejemplo.

00:02:38.696 --> 00:02:40.006 align:middle
Y... ¡sí!

00:02:40.196 --> 00:02:43.796 align:middle
¡Un código de estado 401
con el tipo hydra:error !

00:02:44.726 --> 00:02:50.256 align:middle
La opción security contiene en realidad una expresión
que utiliza el lenguaje de expresiones de Symfony.

00:02:50.616 --> 00:02:52.746 align:middle
Y puedes ponerte muy elegante con ella.

00:02:53.316 --> 00:02:55.626 align:middle
Aunque, vamos a intentar
mantener las cosas simples.

00:02:56.066 --> 00:03:00.666 align:middle
Y más adelante, aprenderemos cómo
descargar reglas complejas a los votantes.

00:03:01.356 --> 00:03:02.556 align:middle
Vamos a añadir unas cuantas reglas más.

00:03:03.056 --> 00:03:04.886 align:middle
Put y Patch son ediciones.

00:03:05.446 --> 00:03:10.936 align:middle
Son especialmente interesantes porque, para utilizarlas,
no sólo necesitamos estar conectados, sino que

00:03:11.186 --> 00:03:14.586 align:middle
probablemente necesitemos ser el
propietario de este DragonTreasure.

00:03:15.086 --> 00:03:17.986 align:middle
No queremos que otras personas
editen nuestras cosas.

00:03:18.526 --> 00:03:20.836 align:middle
Nos preocuparemos de la parte
de la propiedad más adelante.

00:03:21.296 --> 00:03:28.176 align:middle
Pero por ahora, al menos añadamos security
con is_granted() y luego ROLE_TREASURE_EDIT:

00:03:29.016 --> 00:03:31.356 align:middle
Una vez más, estoy utilizando el rol scope.

00:03:32.486 --> 00:03:37.076 align:middle
Copia eso, y duplícalo
aquí abajo para Patch: Ah,

00:03:37.076 --> 00:03:40.236 align:middle
y antes hemos eliminado la operación Delete.

00:03:40.756 --> 00:03:48.936 align:middle
Añadámosla de nuevo con security configurada para
buscar ROLE_ADMIN: Si más adelante decidiéramos

00:03:49.126 --> 00:03:53.766 align:middle
añadir un ámbito que permitiera a los tokens
de la API eliminar tesoros, podríamos añadir lo

00:03:54.026 --> 00:03:56.106 align:middle
y cambiar esto a ROLE_TRESURE_DELETE.

00:03:56.986 --> 00:03:58.046 align:middle
¡Asegurémonos de que esto funciona!

00:03:58.486 --> 00:04:00.116 align:middle
Utiliza la ruta de recolección GET.

00:04:02.016 --> 00:04:02.816 align:middle
Pruébalo.

00:04:04.886 --> 00:04:07.366 align:middle
Esta operación no requiere autenticación...

00:04:07.806 --> 00:04:09.466 align:middle
así que funciona perfectamente.

00:04:10.026 --> 00:04:12.266 align:middle
Y tenemos un tesoro con el ID 1.

00:04:13.326 --> 00:04:22.006 align:middle
Cierra esto, abre la operación PUT,
pulsa "Probar", 1, "Ejecutar" y...

00:04:22.716 --> 00:04:25.816 align:middle
¡bien! ¡Aquí también obtenemos un 401!

00:04:26.816 --> 00:04:31.536 align:middle
Así que añadir la opción security a las operaciones
individuales es probablemente lo más habitual.

00:04:32.316 --> 00:04:37.626 align:middle
Pero también puedes añadirla al propio
ApiResource para que se aplique a toda la clase.

00:04:38.216 --> 00:04:43.966 align:middle
Por ejemplo, en User, probablemente queramos que
todas las operaciones requieran autenticación...

00:04:44.246 --> 00:04:48.946 align:middle
excepto la Post para crear, porque así
es como se registraría un nuevo usuario.

00:04:49.606 --> 00:04:53.526 align:middle
Así que aquí arriba, añade
security y busca ROLE_USER...

00:04:53.916 --> 00:04:58.336 align:middle
sólo para comprobar que hemos iniciado sesión:
Y como esta clase tiene un recurso secundario...

00:04:58.526 --> 00:05:04.046 align:middle
y esto también nos permite buscar un usuario,
asegúrate de añadir security aquí también:

00:05:04.616 --> 00:05:08.806 align:middle
Vigila la seguridad si utilizas subrecursos.

00:05:09.556 --> 00:05:13.536 align:middle
Vale, ahora todas las operaciones en
User requieren que estés conectado.

00:05:14.186 --> 00:05:17.166 align:middle
Pero... no queremos eso
para la operación Post.

00:05:17.756 --> 00:05:24.066 align:middle
Para añadir flexibilidad, sube al primer
ApiResource, añade la opción operations y,

00:05:24.256 --> 00:05:31.416 align:middle
muy rápido, haz una lista de todas las operaciones
normales, new Get(), new GetCollection(), new Post(),

00:05:31.926 --> 00:05:39.856 align:middle
new Put(), new Patch(), y new Delete(): Ahora
que las tenemos, podemos personalizarlas.

00:05:40.656 --> 00:05:46.236 align:middle
Para Post, ya que queremos que no
requiera autenticación, digamos security:

00:05:46.426 --> 00:05:52.106 align:middle
'is_granted() pasando un rol
especial falso llamado PUBLIC_ACCESS:

00:05:52.756 --> 00:05:57.026 align:middle
Esto anulará la regla de seguridad
que estamos pasando a nivel de recurso.

00:05:57.586 --> 00:06:03.476 align:middle
Ah, y ya que estamos aquí, para Put, configura
security para que busque ROLE_USER_EDIT

00:06:03.916 --> 00:06:06.836 align:middle
ya que tenemos un rol de
ámbito para editar usuarios.

00:06:07.856 --> 00:06:13.866 align:middle
Repite eso aquí abajo
para Patch: ¡Me encanta!

00:06:14.486 --> 00:06:16.126 align:middle
Actualiza toda la página.

00:06:17.186 --> 00:06:20.046 align:middle
Lo que más nos interesa
es la ruta POST usuarios.

00:06:20.686 --> 00:06:25.936 align:middle
No estamos autenticados, así que pulsa
"Probar" y dejaré los datos por defecto.

00:06:26.606 --> 00:06:27.856 align:middle
"Ejecutar" y...

00:06:28.716 --> 00:06:29.936 align:middle
¡lo hemos clavado!

00:06:30.146 --> 00:06:32.036 align:middle
Un estado 201.

00:06:32.386 --> 00:06:34.916 align:middle
Eso sí que permitía el acceso anónimo.

00:06:35.556 --> 00:06:40.346 align:middle
Ah, y superdivertido: si alguna vez quieres
ver las decisiones de seguridad que se

00:06:40.346 --> 00:06:44.206 align:middle
tomaron durante una petición, abre
el perfilador de esa petición,

00:06:44.596 --> 00:06:48.436 align:middle
baja a la sección "Seguridad"
y luego a "Decisión de acceso".

00:06:49.286 --> 00:06:52.966 align:middle
Para esta petición, el sistema de
seguridad sólo tomó una decisión:

00:06:53.276 --> 00:06:56.606 align:middle
era para PUBLIC_ACCESS, y estaba permitida.

00:06:57.486 --> 00:07:00.596 align:middle
Siguiente: nuestra API se
está volviendo compleja...

00:07:00.916 --> 00:07:03.336 align:middle
y sólo va a volverse más compleja. Es

00:07:03.756 --> 00:07:07.166 align:middle
hora de dejar de probar nuestras
rutas manualmente mediante Swagger

00:07:07.436 --> 00:07:10.256 align:middle
y empezar a probarlas con
pruebas automatizadas.
