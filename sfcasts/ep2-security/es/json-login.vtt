WEBVTT

00:00:01.036 --> 00:00:04.726 align:middle
En la página de inicio, que está construida en
Vue, tenemos un formulario de inicio de sesión. El

00:00:05.346 --> 00:00:10.476 align:middle
objetivo es que, cuando lo enviemos, envíe una petición
AJAX con el correo electrónico y la contraseña

00:00:10.476 --> 00:00:12.726 align:middle
a una ruta que lo validará.

00:00:13.336 --> 00:00:17.266 align:middle
El formulario en sí está construido
aquí en assets/vue/LoginForm.vue:

00:00:17.826 --> 00:00:20.436 align:middle
Si no estás familiarizado
con Vue, no te preocupes.

00:00:20.806 --> 00:00:24.446 align:middle
Haremos algo de codificación ligera en él,
pero lo estoy utilizando principalmente como

00:00:24.446 --> 00:00:26.996 align:middle
ejemplo para hacer algunas
peticiones a la API. En la

00:00:27.716 --> 00:00:31.426 align:middle
parte inferior, al enviar,
hacemos una petición POST

00:00:31.426 --> 00:00:35.376 align:middle
a /login enviando los datos
email y password como JSON.

00:00:35.816 --> 00:00:40.396 align:middle
Así que nuestro primer objetivo es
crear esta ruta: Afortunadamente,

00:00:40.466 --> 00:00:43.306 align:middle
Symfony tiene un mecanismo
incorporado justo para esto.

00:00:43.716 --> 00:00:47.356 align:middle
Para empezar, aunque no sirva de mucho,
¡necesitamos un nuevo controlador!

00:00:48.216 --> 00:00:50.746 align:middle
En src/Controller/, crea una nueva clase PHP.

00:00:51.046 --> 00:00:52.816 align:middle
Llamémosla SecurityController. Tendrá un

00:00:54.026 --> 00:00:58.326 align:middle
aspecto muy tradicional:
extiende AbstractController,

00:00:59.106 --> 00:01:05.376 align:middle
luego añade un public function login() que
devolverá un Response , el de HttpFoundation:

00:01:06.096 --> 00:01:12.996 align:middle
Arriba, dale un Route con una URL de /login para que
coincida con la que está enviando nuestro JavaScript.

00:01:13.706 --> 00:01:15.706 align:middle
Nombra la ruta app_login.

00:01:16.266 --> 00:01:21.566 align:middle
Ah, y en realidad no necesitamos hacer esto,
pero también podemos añadir methods: ['POST']:

00:01:22.276 --> 00:01:26.846 align:middle
No habrá una página /login en nuestro
sitio a la que hagamos una petición GET:

00:01:27.036 --> 00:01:29.596 align:middle
sólo haremos POST a esta URL.

00:01:30.536 --> 00:01:34.076 align:middle
Como verás en un minuto,
no vamos a procesar email

00:01:34.076 --> 00:01:35.916 align:middle
y password en este controlador...

00:01:36.276 --> 00:01:40.326 align:middle
pero esto se ejecutará después
de un inicio de sesión con éxito.

00:01:40.786 --> 00:01:44.196 align:middle
Entonces... ¿qué deberíamos devolver
tras un inicio de sesión satisfactorio?

00:01:44.386 --> 00:01:45.256 align:middle
No lo sé

00:01:45.816 --> 00:01:49.986 align:middle
Y, sinceramente, depende sobre todo de lo
que sería útil en nuestro JavaScript.

00:01:49.986 --> 00:01:53.516 align:middle
Aún no he pensado mucho
en ello, pero quizá...

00:01:53.516 --> 00:01:54.856 align:middle
¿el identificador de usuario?

00:01:55.336 --> 00:01:56.106 align:middle
Empecemos por ahí.

00:01:56.816 --> 00:02:03.226 align:middle
Si la autenticación se ha realizado correctamente, entonces,
en este punto, el usuario habrá iniciado sesión normalmente.

00:02:04.016 --> 00:02:08.806 align:middle
Para obtener el usuario autenticado actualmente,
voy a aprovechar una nueva función de Symfony.

00:02:09.316 --> 00:02:13.316 align:middle
Añade un argumento con un atributo
PHP llamado #[CurrentUser].

00:02:13.976 --> 00:02:19.006 align:middle
Entonces podremos utilizar la sugerencia de tipo
normal User, llamarla $user y por defecto null,

00:02:19.226 --> 00:02:21.696 align:middle
en caso de que no estemos
autenticados por alguna razón:

00:02:22.166 --> 00:02:24.326 align:middle
Hablaremos de cómo es posible en un minuto.

00:02:24.986 --> 00:02:31.976 align:middle
Entonces, devuelve $this->json() con una clave
user establecida en $user->getId(): ¡Genial!

00:02:32.506 --> 00:02:35.546 align:middle
Y eso es todo lo que necesitamos
que haga nuestro controlador.

00:02:35.546 --> 00:02:39.776 align:middle
Para activar el sistema que hará el verdadero trabajo
de leer el correo electrónico y la contraseña,

00:02:39.936 --> 00:02:42.826 align:middle
dirígete a config/packages/security.yaml.

00:02:44.146 --> 00:02:50.536 align:middle
Bajo el cortafuegos, añade
json_login y debajo check_path...

00:02:50.926 --> 00:02:54.346 align:middle
que debe tener el nombre de la ruta
que acabamos de crear. Entonces,

00:02:54.506 --> 00:03:00.996 align:middle
app_login: Esto activa un oyente de
seguridad: es un trozo de código

00:03:00.996 --> 00:03:07.276 align:middle
que ahora vigilará cada petición para
ver si es una petición POST a esta ruta.

00:03:07.526 --> 00:03:10.286 align:middle
Es decir, un POST a /login.

00:03:11.086 --> 00:03:17.636 align:middle
Si lo es, descodificará el JSON de esa
petición, leerá las claves email y password de

00:03:17.636 --> 00:03:21.486 align:middle
ese JSON, validará la
contraseña y nos conectará.

00:03:21.956 --> 00:03:26.116 align:middle
Sin embargo, tenemos que decirle qué
claves del JSON estamos utilizando.

00:03:26.576 --> 00:03:30.256 align:middle
Nuestro JavaScript está enviando
email y password: super creativo.

00:03:31.116 --> 00:03:37.276 align:middle
Así que debajo de esto, pon username_path
a email y password_path a password: ¡Listo!

00:03:37.276 --> 00:03:41.766 align:middle
Pero, ¡espera! Si enviamos un POST
de email y password a esta ruta...

00:03:42.046 --> 00:03:45.716 align:middle
¿cómo demonios sabe el sistema
cómo encontrar a ese usuario?

00:03:46.236 --> 00:03:49.566 align:middle
¿Cómo se supone que sabe que
debe consultar la tabla user

00:03:49.756 --> 00:03:52.936 align:middle
WHERE email = el correo
electrónico de la petición

00:03:53.426 --> 00:03:54.696 align:middle
? ¡ Excelente

00:03:55.096 --> 00:03:56.796 align:middle
pregunta! En el episodio 1, ejecutamos: php

00:03:56.876 --> 00:04:02.126 align:middle
./bin/console make:user Esto creó una entidad
User con las cosas básicas de seguridad que

00:04:02.126 --> 00:04:10.616 align:middle
necesitamos: En security.yaml, también creó un
proveedor de us uario: Este es un proveedor de entidad:

00:04:11.066 --> 00:04:17.236 align:middle
indica al sistema de seguridad que busque usuarios en
la base de datos consultando por la propiedad email.

00:04:17.926 --> 00:04:22.016 align:middle
Esto significa que nuestro sistema
descodificará el JSON, obtendrá la clave email,

00:04:22.326 --> 00:04:27.226 align:middle
buscará un User con un correo electrónico que
coincida y, a continuación, validará la contraseña.

00:04:27.986 --> 00:04:28.666 align:middle
En otras palabras...

00:04:28.816 --> 00:04:29.946 align:middle
¡estamos listos!

00:04:30.666 --> 00:04:34.796 align:middle
Volviendo a LoginForm.vue, el
JavaScript también está listo:

00:04:35.036 --> 00:04:37.696 align:middle
handleSubmit() se llamará
cuando enviemos el formulario...

00:04:38.086 --> 00:04:41.616 align:middle
y realiza la llamada AJAX:
¡Así que vamos a probarlo!

00:04:42.086 --> 00:04:44.096 align:middle
Muévete y actualiza para estar seguro.

00:04:45.176 --> 00:04:47.266 align:middle
Pruébalo primero con un correo
electrónico y una contraseña falsos.

00:04:48.856 --> 00:04:50.036 align:middle
Envíalo y...

00:04:50.306 --> 00:04:51.736 align:middle
¿no ha pasado nada?

00:04:52.446 --> 00:04:54.896 align:middle
Abre el inspector de tu
navegador y ve a la consola.

00:04:56.306 --> 00:05:02.566 align:middle
Sí, verás un código de estado 401 y
este error: credenciales no válidas.

00:05:03.516 --> 00:05:07.746 align:middle
Eso viene de aquí mismo, de nuestro
JavaScript: una vez finalizada la petición,

00:05:08.136 --> 00:05:11.926 align:middle
si la respuesta es "no está bien" -lo que
significa que había un código de estado 4XX

00:05:11.926 --> 00:05:16.936 align:middle
o 5XX-, descodificamos
el JSON y lo registramos.

00:05:17.666 --> 00:05:22.696 align:middle
Aparentemente, cuando fallamos la autenticación
con json_login, devuelve un pequeño trozo

00:05:22.696 --> 00:05:24.876 align:middle
de JSON con "Credenciales no válidas".

00:05:25.766 --> 00:05:31.766 align:middle
A continuación: convirtamos este error en algo que podamos
ver en el formulario, gestionemos otro caso de error

00:05:31.986 --> 00:05:35.376 align:middle
y luego pensemos qué hacer cuando
la autenticación tenga éxito.
