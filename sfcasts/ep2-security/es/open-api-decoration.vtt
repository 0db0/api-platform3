WEBVTT

00:00:01.136 --> 00:00:06.756 align:middle
Para utilizar tokens de API en Swagger, tenemos que
escribir la palabra "Portador" y luego el token.

00:00:07.056 --> 00:00:11.516 align:middle
¡Lamentable! Sobre todo si pretendemos
que lo utilicen usuarios reales.

00:00:11.516 --> 00:00:13.286 align:middle
¿Cómo podemos solucionarlo?

00:00:13.956 --> 00:00:17.026 align:middle
Recuerda que Swagger se genera enteramente

00:00:17.026 --> 00:00:21.206 align:middle
a partir del documento de especificaciones
OpenAPI que construye API Platform.

00:00:21.696 --> 00:00:24.656 align:middle
Puedes ver este documento
consultando la fuente de la página

00:00:25.056 --> 00:00:30.646 align:middle
-puedes verlo todo ahí-
o yendo a /api/docs.json.

00:00:30.646 --> 00:00:36.336 align:middle
Hace unos minutos, hemos añadido una configuración
a API Platfo rm llamada Authorization:

00:00:36.826 --> 00:00:42.046 align:middle
El resultado final es que ha añadido
estas secciones de seguridad aquí abajo.

00:00:42.716 --> 00:00:47.886 align:middle
Sí, es así de sencillo: esta
configuración activó estas nuevas secciones

00:00:47.886 --> 00:00:50.306 align:middle
en este documento JSON: nada más.

00:00:50.306 --> 00:00:55.116 align:middle
Swagger entonces lee eso y sabe que debe hacer
que esta "Autorización" esté disponible.

00:00:55.116 --> 00:01:01.906 align:middle
Así que indagué un poco directamente en el sitio
de OpenAPI y descubrí que sí tiene una forma

00:01:01.906 --> 00:01:08.326 align:middle
de definir un esquema de autenticación en el que no
necesitas pasar manualmente la parte del "Portador".

00:01:08.326 --> 00:01:15.346 align:middle
Desgraciadamente, a menos que me lo esté perdiendo,
la configuración de API Platform no permite añadirlo.

00:01:15.856 --> 00:01:17.886 align:middle
Entonces, ¿hemos terminado?

00:01:18.416 --> 00:01:21.236 align:middle
De ninguna manera Y por una razón increíble.

00:01:22.016 --> 00:01:28.646 align:middle
Para crear este documento JSON, internamente,
API Platform crea un objeto OpenApi,

00:01:28.856 --> 00:01:34.276 align:middle
rellena todos estos datos en él y luego lo
envía a través del serializador de Symfony.

00:01:34.816 --> 00:01:40.656 align:middle
Esto es importante porque podemos modificar el
objeto OpenApi antes de que pase por el serializador.

00:01:42.356 --> 00:01:48.266 align:middle
¿Cómo? El objeto OpenApi se crea a
través de un núcleo OpenApiFactory...

00:01:48.646 --> 00:01:50.846 align:middle
y podemos decorarlo.

00:01:51.816 --> 00:01:56.596 align:middle
Compruébalo: en el directorio src/, crea
un nuevo directorio llamado ApiPlatform/...

00:01:57.526 --> 00:02:01.936 align:middle
y dentro, una nueva clase PHP
llamada OpenApiFactoryDecorator.

00:02:03.186 --> 00:02:06.306 align:middle
Haz que implemente OpenApiFactoryInterface.

00:02:06.786 --> 00:02:12.446 align:middle
Luego ve a "Código"->"Generar" o Command+N en un
Mac para implementar el único método que necesitamos:

00:02:12.806 --> 00:02:20.866 align:middle
__invoke(): Ahora mismo, existe un servicio
central OpenApiFactory en la API Platform

00:02:20.986 --> 00:02:25.176 align:middle
que crea el objeto OpenApi con
todos estos datos. Éste es

00:02:25.856 --> 00:02:30.966 align:middle
nuestro astuto plan: vamos a decirle a
Symfony que utilice nuestra nueva clase

00:02:30.966 --> 00:02:35.206 align:middle
como OpenApiFactory en lugar de la del núcleo.

00:02:35.686 --> 00:02:40.346 align:middle
Pero... definitivamente no queremos
reimplementar toda la lógica del núcleo.

00:02:40.986 --> 00:02:47.496 align:middle
Para evitarlo, también le diremos a Symfony
que nos pase el núcleo original OpenApiFactory.

00:02:48.226 --> 00:02:49.996 align:middle
Puede que te resulte familiar
lo que estamos haciendo.

00:02:50.386 --> 00:02:56.406 align:middle
Es la decoración de clases: una estrategia
orientada a objetos para extender clases.

00:02:56.916 --> 00:03:02.256 align:middle
Es muy fácil de hacer en Symfony
y API Platform la aprovecha mucho.

00:03:03.226 --> 00:03:06.156 align:middle
Siempre que hagas decoración,
crearás un constructor

00:03:06.156 --> 00:03:08.646 align:middle
que acepte la interfaz que estás decorando.

00:03:08.646 --> 00:03:11.646 align:middle
Así que OpenApiFactoryInterface.

00:03:12.426 --> 00:03:13.976 align:middle
Llamaré a esto $decorated.

00:03:14.426 --> 00:03:18.116 align:middle
Oh, y déjame poner private
delante de eso: Perfecto.

00:03:19.056 --> 00:03:23.956 align:middle
Aquí abajo, para empezar, di
$openApi = $this->decorated

00:03:23.956 --> 00:03:29.676 align:middle
y luego llama al método __invoke()
pasando el mismo argumento: $context:

00:03:30.296 --> 00:03:34.336 align:middle
Eso llamará a la fábrica central
que hará todo el trabajo duro

00:03:34.336 --> 00:03:37.506 align:middle
de crear el objeto OpenApi completo.

00:03:38.186 --> 00:03:42.366 align:middle
Aquí abajo, devuelve eso: ¿Y entre medias?

00:03:42.816 --> 00:03:45.986 align:middle
Sí, ¡ahí es donde podemos liarnos!

00:03:46.676 --> 00:03:53.146 align:middle
Para asegurarnos de que esto funciona, por ahora,
simplemente vuelca el objeto $openApi: En este momento,

00:03:53.146 --> 00:03:58.936 align:middle
desde un punto de vista orientado a objetos, esta clase
está configurada correctamente para la decoración.

00:03:59.226 --> 00:04:04.686 align:middle
Pero el contenedor de Symfony sigue estando
configurado para utilizar el OpenApiFactory normal:

00:04:04.686 --> 00:04:07.306 align:middle
no va a utilizar nuestro
nuevo servicio en absoluto. De

00:04:07.916 --> 00:04:11.276 align:middle
alguna manera tenemos que decirle
al contenedor que, en primer lugar,

00:04:11.586 --> 00:04:18.576 align:middle
el servicio principal OpenApiFactory debe ser
sustituido por nuestro servicio, y en segundo lugar,

00:04:18.786 --> 00:04:23.286 align:middle
que el servicio principal original
debe pasársenos a nosotros.

00:04:23.916 --> 00:04:24.976 align:middle
¿Cómo podemos hacerlo?

00:04:25.556 --> 00:04:29.166 align:middle
Encima de la clase, añade un
atributo llamado #[AsDecorator]

00:04:29.396 --> 00:04:31.786 align:middle
y pulsa tabulador para
añadir esa declaración use.

00:04:32.406 --> 00:04:37.066 align:middle
Pásale el id de servicio del
núcleo original OpenApiFactory.

00:04:37.586 --> 00:04:41.896 align:middle
Puedes indagar un poco para encontrarlo o
normalmente la documentación te lo dirá.

00:04:42.646 --> 00:04:48.226 align:middle
En realidad, API Platform documenta la decoración
de este servicio, así que en sus documentos

00:04:48.446 --> 00:04:55.676 align:middle
encontrarás que el identificador del servicio es
api_platform.openapi.factory: ¡Eso es! Gracias

00:04:55.676 --> 00:05:04.236 align:middle
a esto, cualquiera que estuviera utilizando previamente
el servicio principal api_platform.openapi.factory

00:05:04.546 --> 00:05:07.376 align:middle
recibirá nuestro servicio en su lugar.

00:05:07.856 --> 00:05:10.816 align:middle
Pero se nos pasará el original.

00:05:10.816 --> 00:05:13.376 align:middle
Así que... ¡debería funcionar!

00:05:13.936 --> 00:05:17.016 align:middle
Para probarlo, dirígete a la página
principal de la API y actualízala.

00:05:17.916 --> 00:05:23.376 align:middle
¡Sí! Cuando se carga esta página, renderiza
el documento JSON OpenAPI en segundo plano.

00:05:23.826 --> 00:05:28.136 align:middle
¡El volcado en la barra de herramientas de depuración
web demuestra que ha funcionado con nuestro código!

00:05:28.596 --> 00:05:35.656 align:middle
Y fíjate en ese precioso objeto OpenApi:
lo tiene todo, incluido security,

00:05:35.796 --> 00:05:37.956 align:middle
que coincide con lo que vimos en el JSON.

00:05:37.956 --> 00:05:40.516 align:middle
Así que ahora, ¡podemos retocarlo!

00:05:41.316 --> 00:05:47.476 align:middle
El código que pondré aquí es un poco específico
del objeto OpenApi y de la configuración exacta

00:05:47.586 --> 00:05:51.316 align:middle
que sé que necesitamos en el
JSON final de la API Abierta:

00:05:51.316 --> 00:05:56.396 align:middle
Obtenemos el objeto $securitySchemes,
y luego anulamos access_token.

00:05:56.946 --> 00:05:59.156 align:middle
Esto coincide con el nombre que
utilizamos en la configuración.

00:05:59.156 --> 00:06:06.336 align:middle
Establece un nuevo objeto SecurityScheme()
con dos argumentos con nombre: tipo:

00:06:06.336 --> 00:06:11.106 align:middle
'http' y scheme: 'bearer': ¡Ya está!

00:06:11.106 --> 00:06:15.906 align:middle
Primero actualiza el documento JSON sin procesar
para que podamos ver qué aspecto tiene.

00:06:16.486 --> 00:06:18.376 align:middle
Déjame buscar "Portador".

00:06:19.316 --> 00:06:19.976 align:middle
¡Ya está!

00:06:20.246 --> 00:06:22.546 align:middle
¡Hemos modificado el aspecto del JSON!

00:06:23.186 --> 00:06:26.226 align:middle
¿Qué opina Swagger de
esta nueva configuración?

00:06:26.226 --> 00:06:28.076 align:middle
Actualiza y pulsa "Autorizar".

00:06:29.126 --> 00:06:32.636 align:middle
Ok guay: access_token, http, Bearer.

00:06:33.106 --> 00:06:34.556 align:middle
Ve a robar un token de API...

00:06:35.746 --> 00:06:40.256 align:middle
pega sin decir Bearer
primero y dale a "Autorizar".

00:06:41.056 --> 00:06:42.716 align:middle
Probemos la misma ruta.

00:06:43.486 --> 00:06:45.386 align:middle
Uy, tengo que darle a "Probar".

00:06:47.016 --> 00:06:49.286 align:middle
Y... ¡precioso!

00:06:49.486 --> 00:06:51.566 align:middle
¡Mira esa cabecera Authorization!

00:06:52.026 --> 00:06:54.126 align:middle
Ha pasado Bearer por nosotros.

00:06:54.486 --> 00:06:55.926 align:middle
Misión cumplida. Por

00:06:56.866 --> 00:07:03.016 align:middle
cierto, podrías pensar que, como estamos anulando
por completo la configuración de access_token,

00:07:03.446 --> 00:07:06.536 align:middle
podríamos simplemente
eliminarla de api_platform.yaml.

00:07:06.536 --> 00:07:10.116 align:middle
Desgraciadamente, por razones
sutiles que tienen que ver

00:07:10.116 --> 00:07:14.266 align:middle
con cómo se genera la documentación
de seguridad, seguimos necesitándolo.

00:07:14.856 --> 00:07:18.236 align:middle
Pero diré # overridden in
OpenApiFactoryDecorator:

00:07:18.956 --> 00:07:23.376 align:middle
Esto era sólo un ejemplo de cómo podrías ampliar
tu documento de especificaciones de la API Abierta.

00:07:23.956 --> 00:07:27.336 align:middle
Pero si alguna vez necesitas modificar
algo más, ahora ya sabes cómo.

00:07:28.226 --> 00:07:30.616 align:middle
A continuación, hablemos de los ámbitos.
