WEBVTT

00:00:01.126 --> 00:00:05.806 align:middle
Cada ApiToken tiene una matriz de ámbitos,
aunque todavía no la estamos utilizando.

00:00:06.316 --> 00:00:11.666 align:middle
La idea es genial: cuando se crea un token,
puedes seleccionar qué permisos tiene.

00:00:11.966 --> 00:00:13.876 align:middle
Por ejemplo, tal vez un to ken tenga permiso

00:00:13.876 --> 00:00:17.456 align:middle
para crear nuevos tesoros, pero
no para editar tesoros existentes.

00:00:18.046 --> 00:00:22.966 align:middle
Para permitirlo, vamos a asignar los
ámbitos de un token a roles en Symfony.

00:00:23.666 --> 00:00:27.896 align:middle
Ahora mismo en ApiTokenHandler, básicamente
estamos devolviendo el usuario...

00:00:28.286 --> 00:00:31.196 align:middle
y entonces el sistema se autentica
completamente como ese usuario.

00:00:31.786 --> 00:00:35.586 align:middle
Esto significa que obtenemos los
roles que haya en ese objeto User.

00:00:36.256 --> 00:00:40.196 align:middle
¿Cómo podríamos cambiar eso para que
nos autentiquemos como este usuario...

00:00:40.556 --> 00:00:42.516 align:middle
pero con un conjunto diferente de funciones?

00:00:42.856 --> 00:00:45.266 align:middle
¿Un conjunto basado en los ámbitos del token?

00:00:45.986 --> 00:00:48.896 align:middle
Estamos utilizando el sistema
de seguridad access_token.

00:00:49.556 --> 00:00:54.096 align:middle
Pulsa Shift+Shift y abre una clase
principal llamada AccessTokenAuthenticator.

00:00:55.346 --> 00:01:00.496 align:middle
Esto es genial: ¡es el código real que hay
detrás de ese sistema de autenticación! Por

00:01:01.256 --> 00:01:05.066 align:middle
ejemplo, aquí es donde coge
el token de la petición

00:01:05.226 --> 00:01:09.526 align:middle
y llama al método getUserBadgeFrom()
de nuestro controlador de token.

00:01:10.356 --> 00:01:15.856 align:middle
Los roles que tendrá el usuario también se
determinan aquí: abajo dentro de createToken().

00:01:16.476 --> 00:01:21.066 align:middle
El "token" es, en cierto modo, una "envoltura"
del objeto User en el sistema de seguridad.

00:01:21.416 --> 00:01:24.436 align:middle
Y aquí es donde le pasamos
los roles que debe tener.

00:01:25.086 --> 00:01:31.616 align:middle
Como puedes ver, los roles serán
$passport->getUser()->getRoles().

00:01:32.216 --> 00:01:37.346 align:middle
En otras palabras, siempre obtenemos los roles
llamando a getRoles() en la clase User...

00:01:37.756 --> 00:01:40.066 align:middle
que sólo devuelve la propiedad roles.

00:01:40.486 --> 00:01:42.666 align:middle
Así que no hay un gran punto de enganche.

00:01:43.256 --> 00:01:49.626 align:middle
Podríamos crear una clase autenticadora personalizada
e implementar nuestro propio método createToken().

00:01:50.156 --> 00:01:52.076 align:middle
Pero eso es un fastidio porque tendríamos

00:01:52.076 --> 00:01:56.306 align:middle
que reimplementar completamente la
lógica de esta clase autenticadora.

00:01:56.656 --> 00:01:58.796 align:middle
Así que, en lugar de eso, podemos...

00:01:58.896 --> 00:01:59.656 align:middle
hacer una especie de trampa.

00:02:00.256 --> 00:02:01.426 align:middle
Empieza en User.

00:02:02.126 --> 00:02:04.426 align:middle
Desplázate hasta la parte superior,
donde están nuestras propiedades.

00:02:05.176 --> 00:02:11.926 align:middle
Añade una nueva: private ?array llamada
$accessTokenScopes e inicialízala a null:

00:02:12.856 --> 00:02:15.696 align:middle
Observa que no es una columna persistente.

00:02:16.066 --> 00:02:20.166 align:middle
Es sólo un lugar para almacenar temporalmente
los ámbitos que debe tener el usuario.

00:02:21.166 --> 00:02:26.676 align:middle
A continuación, en la parte inferior añade un nuevo
método público llamado markAsTokenAuthenticated()

00:02:27.006 --> 00:02:29.076 align:middle
con un argumento array $scopes.

00:02:29.796 --> 00:02:32.096 align:middle
Vamos a llamarlo durante la autenticación.

00:02:32.606 --> 00:02:39.596 align:middle
Dentro, di $this->accessTokenScopes = $scopes:
Aquí es donde las cosas se ponen interesantes.

00:02:40.026 --> 00:02:42.066 align:middle
Busca el método getRoles().

00:02:42.786 --> 00:02:48.016 align:middle
Sabemos que, pase lo que pase, Symfony
lo llamará durante la autenticación

00:02:48.406 --> 00:02:52.426 align:middle
y lo que devuelva, esos serán
los roles que tendrá el usuario.

00:02:52.886 --> 00:02:56.466 align:middle
Vamos a "colar" nuestros roles de alcance. En

00:02:57.146 --> 00:03:00.146 align:middle
primer lugar, si la propiedad
$accessTokenScopes es null,

00:03:00.396 --> 00:03:03.166 align:middle
significa que estamos iniciando
sesión como un usuario normal.

00:03:03.716 --> 00:03:09.286 align:middle
En este caso, establece $roles en $this->roles
para que obtengamos todos los $roles en User.

00:03:09.886 --> 00:03:15.206 align:middle
A continuación, añade un rol adicional llamado
ROLE_FULL_USER: Hablaremos de ello en un minuto.

00:03:15.786 --> 00:03:23.796 align:middle
Por otro lado, si iniciamos sesión mediante un token de
acceso, digamos $roles = $this->accessTokenScopes: Y,

00:03:23.846 --> 00:03:27.856 align:middle
en ambos casos, asegúrate de
que siempre tenemos ROLE_USER:

00:03:28.646 --> 00:03:32.006 align:middle
Una vez hecho esto,
dirígete a ApiTokenHandler.

00:03:32.626 --> 00:03:34.876 align:middle
Justo antes de devolver UserBadge,

00:03:35.256 --> 00:03:39.996 align:middle
añade
$token->getOwnedBy()->markAsTokenAuthenticated() y

00:03:40.166 --> 00:03:44.256 align:middle
pasa $token->getScopes(): ¡Listo! ¡Vamos a

00:03:44.916 --> 00:03:46.136 align:middle
probarlo! De vuelta a

00:03:47.086 --> 00:03:51.156 align:middle
Swagger, ya tiene nuestro
token de API... así que

00:03:51.466 --> 00:03:53.786 align:middle
podemos volver a ejecutar la petición. Genial:

00:03:55.116 --> 00:03:57.626 align:middle
vemos la cabecera Authorization. ¿Se ha

00:03:58.256 --> 00:04:00.856 align:middle
autenticado con los
ámbitos correctos? Haz clic

00:04:01.526 --> 00:04:03.756 align:middle
para abrir el perfil de esa petición... y

00:04:04.086 --> 00:04:05.596 align:middle
dirígete a "Seguridad". ¡Lo

00:04:06.586 --> 00:04:12.756 align:middle
ha hecho! Mira: hemos iniciado sesión como ese
usuario, pero con ROLE_USER, ROLE_USER_EDIT y

00:04:13.096 --> 00:04:16.956 align:middle
ROLE_TREASURE_CREATE: los dos ámbitos
del token. Pero si iniciáramos sesión

00:04:17.616 --> 00:04:21.866 align:middle
a través del formulario de
acceso, en lugar de estos ámbitos,

00:04:22.086 --> 00:04:27.166 align:middle
tendríamos los roles que el usuario tenga
normalmente, además de ROLE_FULL_USER. En el

00:04:28.016 --> 00:04:32.676 align:middle
próximo capítulo, utilizaremos estos roles para
proteger distintas operaciones de la API. Por

00:04:33.256 --> 00:04:38.426 align:middle
ejemplo, para utilizar la ruta POST tesoros,
necesitaremos ROLE_TREASURE_CREATE. Pero

00:04:39.016 --> 00:04:42.906 align:middle
también tenemos que asegurarnos de que si un usuario se
conecta a través del formulario de inicio de sesión,

00:04:43.046 --> 00:04:48.106 align:middle
pueda seguir utilizando esta operación,
aunque no tenga ese rol exacto.

00:04:48.686 --> 00:04:52.106 align:middle
Ahí es donde ROLE_FULL_USER
resulta útil. Abre

00:04:52.826 --> 00:04:59.646 align:middle
config/packages/security.yaml y, en
cualquier lugar, añade role_hierarchy...

00:05:00.216 --> 00:05:02.256 align:middle
Te recomiendo que lo escribas correctamente. Di

00:05:03.766 --> 00:05:05.826 align:middle
ROLE_FULL_USER. Así,

00:05:06.656 --> 00:05:09.056 align:middle
si has iniciado sesión como
usuario completo, vamos a

00:05:09.346 --> 00:05:13.066 align:middle
darte todos los ámbitos posibles
que podría tener un token. Copia

00:05:13.926 --> 00:05:22.396 align:middle
los tres roles de ámbito: ROLE_USER_EDIT, ROLE_TREASURE_CREATE
y ROLE_TREASURE_EDIT : Debemos tener cuidado de asegurarnos

00:05:23.126 --> 00:05:27.946 align:middle
de que si añadimos más ámbitos,
también los añadimos aquí. Gracias

00:05:28.756 --> 00:05:34.826 align:middle
a esto, si protegemos algo requiriendo
ROLE_USER_EDIT, los usuarios que se registren

00:05:34.826 --> 00:05:37.686 align:middle
a través del formulario de
acceso tendrán acceso. Bien

00:05:38.586 --> 00:05:41.596 align:middle
equipo, ¡hemos terminado con la
autenticación! ¡Guau! A continuación

00:05:41.816 --> 00:05:48.116 align:middle
, vamos a empezar con la "autorización",
aprendiendo a bloquear operaciones para que

00:05:48.386 --> 00:05:50.906 align:middle
sólo puedan acceder a
ellas determinados usuarios.
