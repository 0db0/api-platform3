WEBVTT

00:00:01.116 --> 00:00:03.496 align:middle
Nuestra API es cada vez más compleja.

00:00:03.806 --> 00:00:07.676 align:middle
Y hacer pruebas manualmente no
es un buen plan a largo plazo.

00:00:07.676 --> 00:00:10.936 align:middle
Así que vamos a instalar algunas herramientas para
conseguir una configuración de pruebas matadora.

00:00:10.936 --> 00:00:17.716 align:middle
Primer paso: en tu terminal ejecuta: composer
require test Este es un alias de flex

00:00:17.716 --> 00:00:19.896 align:middle
para un paquete llamado symfony/test-pack.

00:00:20.426 --> 00:00:25.856 align:middle
Recuerda: los paquetes son paquetes de acceso directo
que en realidad instalan un montón de otros paquetes.

00:00:25.856 --> 00:00:28.716 align:middle
Por ejemplo, cuando esto termine...

00:00:28.996 --> 00:00:36.016 align:middle
y comprobamos composer.json, puedes ver abajo en
require-dev que esto añadió el propio PHPUnit así como

00:00:36.016 --> 00:00:39.186 align:middle
algunas otras herramientas de
Symfony para ayudar en las pruebas:

00:00:40.236 --> 00:00:43.386 align:middle
También ejecutó una receta
que añadió varios archivos.

00:00:43.586 --> 00:00:47.426 align:middle
Tenemos phpunit.xml.dist, un directorio tests/,

00:00:47.816 --> 00:00:51.606 align:middle
.env.test para variables de
entorno específicas de las pruebas

00:00:51.876 --> 00:00:58.516 align:middle
e incluso un pequeño acceso directo ejecutable bin/phpunit
que utilizaremos para ejecutar nuestras pruebas.

00:00:58.516 --> 00:01:02.696 align:middle
No es ninguna sorpresa, Symfony tiene herramientas para realizar
pruebas y éstas se pueden utilizar para probar una API.

00:01:03.586 --> 00:01:08.306 align:middle
Diablos, API Platform incluso tiene sus
propias herramientas construidas sobre ellas

00:01:08.426 --> 00:01:10.736 align:middle
para que probar una API
sea aún más fácil. Sin

00:01:11.306 --> 00:01:13.776 align:middle
embargo, voy a ser testarudo

00:01:13.776 --> 00:01:17.316 align:middle
y utilizar una herramienta totalmente
diferente de la que me he enamorado.

00:01:17.316 --> 00:01:22.046 align:middle
Se llama Browser, y también está construida
sobre las herramientas de prueba de Symfony:

00:01:22.496 --> 00:01:25.776 align:middle
casi como una interfaz más agradable
por encima de esa sólida base.

00:01:26.246 --> 00:01:26.836 align:middle
Es simplemente...

00:01:26.836 --> 00:01:28.106 align:middle
súper divertido de usar. Browser

00:01:28.726 --> 00:01:32.466 align:middle
nos proporciona una interfaz fluida que puede
utilizarse para probar aplicaciones web,

00:01:32.646 --> 00:01:36.046 align:middle
como ves aquí, o para probar APIs.

00:01:36.046 --> 00:01:39.156 align:middle
También puede utilizarse para probar
páginas que utilicen JavaScript.

00:01:39.736 --> 00:01:40.806 align:middle
Vamos a instalarlo.

00:01:41.416 --> 00:01:47.566 align:middle
Copia la línea composer require, gira hacia
atrás y ejecútalo: Mientras eso hace lo suyo,

00:01:47.856 --> 00:01:54.106 align:middle
es opcional, pero hay una "extensión"
que puedes añadir a phpunit.xml.dist.

00:01:54.106 --> 00:01:58.666 align:middle
Añádela aquí abajo: En el
futuro, si utilizas PHPUnit 10, es

00:01:58.916 --> 00:02:01.826 align:middle
probable que esto se sustituya por
alguna configuración de listener.

00:02:02.456 --> 00:02:04.736 align:middle
Esto añade algunas
funciones extra al navegador.

00:02:04.916 --> 00:02:09.966 align:middle
Por ejemplo, cuando falle una prueba, guardará
automáticamente la última respuesta en un archivo.

00:02:10.396 --> 00:02:11.256 align:middle
Pronto veremos esto.

00:02:11.256 --> 00:02:16.276 align:middle
Y si utilizas pruebas con JavaScript,
¡hará capturas de pantalla de los fallos!

00:02:17.016 --> 00:02:18.976 align:middle
Bien, ya estamos listos
para nuestra primera prueba.

00:02:19.366 --> 00:02:23.036 align:middle
En el directorio tests/, no
importa cómo organices las cosas,

00:02:23.246 --> 00:02:26.746 align:middle
pero yo voy a crear un directorio
Functional/ porque vamos a

00:02:26.746 --> 00:02:28.836 align:middle
hacer pruebas funcionales a nuestra API.

00:02:29.726 --> 00:02:36.186 align:middle
Sí, crearemos literalmente un cliente API,
haremos peticiones GET o POST y luego afirmaremos

00:02:36.186 --> 00:02:37.786 align:middle
que obtenemos de vuelta la salida correcta.

00:02:38.516 --> 00:02:41.616 align:middle
Crea una nueva clase llamada
DragonTreasureResourceTest.

00:02:43.586 --> 00:02:46.416 align:middle
Una prueba normal extiende TestCase de PHPUnit.

00:02:46.796 --> 00:02:52.276 align:middle
Pero haz que extienda KernelTestCase: una
clase de Symfony que extiende TestCase...

00:02:52.516 --> 00:02:57.916 align:middle
pero que nos da acceso al motor de Symfony:
Empecemos probando la ruta de recolección GET

00:02:57.916 --> 00:03:00.046 align:middle
para asegurarnos de que obtenemos
los datos que esperamos.

00:03:00.786 --> 00:03:07.896 align:middle
Para activar la biblioteca del navegador, en la parte
superior, añade un trait con use HasBrowser: A continuación,

00:03:07.896 --> 00:03:13.246 align:middle
añade un nuevo método de prueba: public function,
¿qué tal testGetCollectionOfTreasures()...

00:03:13.856 --> 00:03:20.496 align:middle
que devolverá void: Utilizar el navegador es
sencillísimo gracias a ese trait: $this->browser().

00:03:21.346 --> 00:03:25.186 align:middle
Ahora podemos hacer peticiones
GET, POST, PATCH o lo que queramos.

00:03:25.886 --> 00:03:31.976 align:middle
Haz una petición GET a /api/treasures
y luego, para ver cómo queda,

00:03:32.186 --> 00:03:35.476 align:middle
utiliza esta ingeniosa función
->dump(): ¿No es genial?

00:03:35.476 --> 00:03:37.376 align:middle
Veamos qué aspecto tiene.

00:03:37.786 --> 00:03:40.496 align:middle
Para ejecutar nuestra prueba, podríamos
ejecutar: php ./vendor/bin/phpunit

00:03:40.496 --> 00:03:43.736 align:middle
Eso funciona perfectamente. Pero

00:03:44.086 --> 00:03:47.226 align:middle
una de las recetas también añadía
un archivo de acceso directo: php

00:03:47.226 --> 00:03:52.346 align:middle
bin/phpunit Al ejecutarlo, veamos. El

00:03:53.886 --> 00:03:57.566 align:middle
dump() sí que funcionó:
volcó la respuesta... que

00:03:57.566 --> 00:03:59.246 align:middle
era una especie de error.

00:03:59.786 --> 00:04:04.606 align:middle
Dice SQLSTATE: falló la conexión
al puerto 5432 del servidor.

00:04:05.246 --> 00:04:07.806 align:middle
No puede conectarse a nuestra
base de datos. Nuestra

00:04:08.456 --> 00:04:11.166 align:middle
base de datos se ejecuta a través
de un contenedor Docker.. . y

00:04:11.706 --> 00:04:17.196 align:middle
luego, como estamos utilizando el servidor web symfony,
cuando utilizamos el sitio a través de un navegador, el

00:04:17.556 --> 00:04:20.186 align:middle
servidor websymfony detecta
el contenedor Docker y

00:04:20.546 --> 00:04:24.946 align:middle
establece la variable de entorno
DATABASE_URL por nosotros.

00:04:25.386 --> 00:04:28.566 align:middle
Así es como nuestra API ha podido hablar con
la base de datos Docker. Cuando hemos ejecutado

00:04:29.156 --> 00:04:33.016 align:middle
comandos que necesitan hablar con la
base de datos, los hemos ejecutado como

00:04:33.016 --> 00:04:35.736 align:middle
symfony console make:migration... porque

00:04:36.156 --> 00:04:42.456 align:middle
cuando ejecutamos cosas a través de symfony,
añade la variable de entorno DATABASE_URL... y

00:04:42.866 --> 00:04:44.476 align:middle
luego ejecuta el comando. Así que,

00:04:44.476 --> 00:04:47.946 align:middle
cuando simplemente
ejecutamos php bin/phpunit...

00:04:48.286 --> 00:04:51.166 align:middle
falta el verdadero DATABASE_URL. Para

00:04:51.786 --> 00:04:57.396 align:middle
solucionarlo, Ejecuta: symfony php
bin/phpunit Es lo mismo.. . excepto que

00:04:57.656 --> 00:05:01.826 align:middle
deja que symfony añada la
variable de entorno DATABASE_URL. Y

00:05:02.306 --> 00:05:03.146 align:middle
ahora...

00:05:03.756 --> 00:05:05.566 align:middle
¡volvemos a ver el volcado! Desplázate

00:05:06.086 --> 00:05:06.986 align:middle
hasta arriba. ¡Mejor!

00:05:08.256 --> 00:05:13.616 align:middle
Ahora el error dice La base de datos
app_test no existe. Interesante.

00:05:14.486 --> 00:05:15.146 align:middle
Para

00:05:15.456 --> 00:05:18.856 align:middle
entender lo que está pasando, abre
config/packages/doctrine.yaml. Desplázate

00:05:18.856 --> 00:05:22.486 align:middle
hasta la sección when@test. Esto

00:05:22.486 --> 00:05:26.096 align:middle
es genial: cuando estamos
en el entorno test, hay un

00:05:26.496 --> 00:05:30.116 align:middle
trozo de configuración llamado dbname_suffix.

00:05:30.116 --> 00:05:36.316 align:middle
Gracias a esto, Doctrine tomará el nombre normal
de nuestra base de datos y le añadirá _test: La

00:05:37.006 --> 00:05:43.016 align:middle
siguiente parte es específica de una biblioteca llamada
ParaTest en la que puedes ejecutar pruebas en paralelo. Como

00:05:43.016 --> 00:05:48.246 align:middle
no vamos a utilizar eso, es sólo una cadena vacía y no es
algo de lo que debamos preocuparnos. De todos modos, así es

00:05:49.086 --> 00:05:54.136 align:middle
como acabamos con un _test al final
del nombre de nuestra base de datos. Y

00:05:54.606 --> 00:05:55.616 align:middle
eso es lo que queremos

00:05:55.946 --> 00:06:01.686 align:middle
No queremos que nuestros entornos dev y test utilicen
la misma base de datos, porque resulta molesto cuando se

00:06:01.686 --> 00:06:03.536 align:middle
sobreescriben mutuamente. Por

00:06:04.386 --> 00:06:08.456 align:middle
cierto, si no estás utilizando la
configuración binaria y Docker de symfony... y

00:06:08.856 --> 00:06:13.986 align:middle
estás configurando tu base de datos
manualmente, ten en cuenta que en el entorno test

00:06:14.156 --> 00:06:19.306 align:middle
no se lee el archivo.env.local:
El entorno test es especial:

00:06:19.656 --> 00:06:24.596 align:middle
se salta la lectura de
.env.local y sólo lee .env.test.

00:06:25.286 --> 00:06:31.986 align:middle
También puedes crear un .env.local.test para las
variables de entorno que se leen en el entorno test pero

00:06:32.336 --> 00:06:34.956 align:middle
que no se consignarán en tu
repositorio. Vale, en el entorno

00:06:35.886 --> 00:06:39.306 align:middle
test, nos falta la base de datos.

00:06:39.846 --> 00:06:44.476 align:middle
Podríamos arreglarlo fácilmente ejecutando:
symfony console doctrine:database:create --env=test

00:06:44.476 --> 00:06:48.126 align:middle
Pero eso es demasiado trabajo. En lugar de eso,

00:06:48.126 --> 00:06:57.466 align:middle
añade un rasgo más a nuestra clase de prueba:
use ResetDatabase: Esto viene de Foundry: la

00:06:57.946 --> 00:07:02.626 align:middle
biblioteca que hemos estado utilizando para crear accesorios
ficticios mediante las clases de fábrica. ResetDatabase

00:07:03.156 --> 00:07:05.436 align:middle
es increíble. Se

00:07:06.046 --> 00:07:11.266 align:middle
asegura automáticamente de que la base de
datos se vacía antes de cada prueba. Así,

00:07:11.266 --> 00:07:16.436 align:middle
si tienes dos pruebas, la segunda
no se estropeará por culpa de

00:07:16.436 --> 00:07:18.916 align:middle
algún dato que haya añadido la primera.

00:07:19.596 --> 00:07:22.556 align:middle
También va a crear la base de
datos automáticamente por nosotros.

00:07:22.956 --> 00:07:23.416 align:middle
Compruébalo. Ejecuta

00:07:23.786 --> 00:07:28.146 align:middle
de nuevosymfony php bin/phpunit
y comprueba el volcado. ¡ Esa es

00:07:28.816 --> 00:07:30.536 align:middle
nuestra respuesta! ¡ Es

00:07:30.706 --> 00:07:32.476 align:middle
nuestro precioso J SON-LD!

00:07:32.476 --> 00:07:37.396 align:middle
Aún no tenemos ningún elemento en la
colección, pero está funcionando. Y

00:07:38.096 --> 00:07:45.906 align:middle
fíjate en que, cuando hacemos esta petición , no estamos
enviando una cabecera Accept en la petición. Recuerda que,

00:07:45.906 --> 00:07:48.446 align:middle
cuando utilizamos la interfaz Swagger UI...

00:07:49.116 --> 00:07:56.706 align:middle
en realidad sí envía una cabecera Accept
que anuncia que queremos application/ld+json.

00:07:57.656 --> 00:08:00.726 align:middle
Podemos añadirlo a nuestra
prueba si queremos. Pero

00:08:01.186 --> 00:08:07.906 align:middle
si no pasamos nada, obtendremos JSON-LD de vuelta porque ése es
el formato por defecto de nuestra API. A continuación vamos a

00:08:07.906 --> 00:08:14.236 align:middle
terminar adecuadamente esta prueba, incluyendo la
alimentación de la base de datos con datos y el

00:08:14.566 --> 00:08:17.376 align:middle
aprendizaje sobre las
aserciones de la API de Browser.
