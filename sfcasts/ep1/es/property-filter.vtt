WEBVTT

00:00:01.036 --> 00:00:01.786 align:middle
Próximamente...

00:00:01.786 --> 00:00:03.486 align:middle
Añadamos un filtro más.

00:00:03.646 --> 00:00:06.046 align:middle
Podemos, ahora mismo tenemos tres,
pero quizá queramos filtrar realmente

00:00:06.046 --> 00:00:08.016 align:middle
sobre el valor, quizá como entre un rango.

00:00:08.076 --> 00:00:10.926 align:middle
Para eso hay otro filtro incorporado
llamado filtro de rango. Así que

00:00:10.926 --> 00:00:18.286 align:middle
buscaré la propiedad valor y, como antes, usaremos
el filtro API y luego el filtro de rango, el

00:00:18.516 --> 00:00:21.006 align:middle
de la clase O rm, dos puntos, dos puntos.

00:00:21.006 --> 00:00:24.046 align:middle
Y éste no necesita ninguna otra opción.

00:00:24.216 --> 00:00:26.726 align:middle
Vaya, qué fácil.

00:00:26.726 --> 00:00:30.926 align:middle
Ahora cuando refresquemos
y lo abramos, pruébalo.

00:00:31.126 --> 00:00:32.466 align:middle
Fíjate.

00:00:32.856 --> 00:00:34.896 align:middle
Un montón de nuevas.

00:00:35.046 --> 00:00:38.476 align:middle
Valor entre valor mayor que, mayor que o igual.

00:00:38.476 --> 00:00:45.236 align:middle
Así que vamos a hacer valor mayor
que, no sé, no recuerdo cómo,

00:00:45.356 --> 00:00:48.476 align:middle
cuáles son mis valores al ejecutar.

00:00:49.876 --> 00:00:51.886 align:middle
Puedes verlo un poco en la URL.

00:00:51.966 --> 00:00:59.066 align:middle
La codificación de la URL se ve fea porque la
codificación de la URL, pero funciona si miro aquí abajo.

00:00:59.066 --> 00:01:03.166 align:middle
Genial. Parece que sólo
devuelve 18 resultados.

00:01:03.166 --> 00:01:08.596 align:middle
Bien, el último filtro que quiero
mostrarte no es un filtro en absoluto.

00:01:08.826 --> 00:01:13.926 align:middle
Es una forma de permitir que nuestros clientes de la
API elijan qué campos quieren que se les devuelvan.

00:01:14.116 --> 00:01:20.246 align:middle
Para mostrarlo, busca tu método
get description y supongamos

00:01:20.246 --> 00:01:25.876 align:middle
que queremos devolver una versión corta de la
descripción, como una versión truncada. Para ello, voy a

00:01:25.956 --> 00:01:29.196 align:middle
copiar el método get description,

00:01:29.196 --> 00:01:31.616 align:middle
crear una nueva cosa llamada
get short description,

00:01:31.616 --> 00:01:33.896 align:middle
y luego voy a, y luego vamos a truncar esto.

00:01:34.046 --> 00:01:36.556 align:middle
Vamos a utilizar la función tú de Symphony.

00:01:36.856 --> 00:01:40.306 align:middle
Así que escribe tú y asegúrate de que
debo pulsar tabulador para que se complete.

00:01:41.016 --> 00:01:43.786 align:middle
Esta es una función rara
que tenemos en Symphony.

00:01:43.786 --> 00:01:47.016 align:middle
Y al pulsar tabulador añadimos
una declaración U para ella.

00:01:47.016 --> 00:01:51.286 align:middle
Así que di U. Y luego tenemos un
montón de buenos métodos para esto.

00:01:51.286 --> 00:01:58.216 align:middle
Uno de ellos se llama Truncar y lo truncaremos a los
40 caracteres con un pequeño punto, punto, punto.

00:01:58.216 --> 00:02:02.136 align:middle
Genial. Así que ahora mismo, este es un método
PHP normal perfectamente funcional para exponer esto

00:02:02.136 --> 00:02:05.266 align:middle
a nuestra API por encima de esto, sólo
tenemos que añadir la anotación del grupo eh,

00:02:05.266 --> 00:02:07.146 align:middle
atributo con dos puntos Tesoro Reed.

00:02:07.876 --> 00:02:08.526 align:middle
Precioso.

00:02:08.756 --> 00:02:14.356 align:middle
Así que para comprobar esto, en realidad voy a hacer
trampas y volver a nuestro slash api slash tra tra.

00:02:14.986 --> 00:02:19.686 align:middle
En realidad vuelve a tu
documentación y refresca.

00:02:19.686 --> 00:02:25.716 align:middle
Y si abres el get open, el
get end point hit pruébalo.

00:02:25.716 --> 00:02:26.066 align:middle
Ya está.

00:02:26.066 --> 00:02:28.756 align:middle
Ejecuta y aparecerá una
bonita descripción corta.

00:02:28.756 --> 00:02:33.676 align:middle
Ahora lo único un poco raro aquí
es que tenemos dos combustibles.

00:02:33.676 --> 00:02:37.856 align:middle
Estamos mostrando la descripción
corta y también la descripción.

00:02:37.856 --> 00:02:43.706 align:middle
Si nuestro cliente de la API quiere la descripción
corta, puede que no quiera que mostremos también

00:02:43.706 --> 00:02:48.466 align:middle
la descripción para ahorrar
ancho de banda o algo así.

00:02:48.536 --> 00:02:50.176 align:middle
Así que eso es un poco derrochador.

00:02:50.176 --> 00:02:53.636 align:middle
Así que para ayudar con esto, una cosa que
podemos hacer es utilizar el filtro de propiedades.

00:02:53.636 --> 00:02:55.416 align:middle
Así que vuelve a Tesoro Dragón.

00:02:55.416 --> 00:02:58.706 align:middle
Se trata de un filtro que tiene
que ir por encima de la clase.

00:02:58.706 --> 00:03:02.006 align:middle
Escribe filtro API y luego
filtro de propiedades.

00:03:02.006 --> 00:03:05.676 align:middle
En este caso sólo hay uno,
dos puntos, dos puntos clase.

00:03:05.676 --> 00:03:10.826 align:middle
Y hay algunas opciones que puedes pasar a esto.

00:03:10.826 --> 00:03:14.146 align:middle
Puedes consultar la documentación,
pero no necesita ninguna opción.

00:03:14.146 --> 00:03:17.086 align:middle
¿Y eso qué hace?

00:03:17.086 --> 00:03:23.866 align:middle
Bueno, si vas a refrescar la documentación
y miras la ruta de la colección

00:03:23.866 --> 00:03:31.876 align:middle
, y vamos a probarla, aquí hay un
nuevo elemento de propiedades al

00:03:31.876 --> 00:03:36.786 align:middle
que puedes añadir una cadena.

00:03:36.786 --> 00:03:40.126 align:middle
Así que vamos a añadir uno nuevo llamado
nombre y otro llamado descripción.

00:03:40.346 --> 00:03:47.776 align:middle
Genial. Aquí abajo tendré ejecutar y puedes
ver que nos salta a la url U como de costumbre.

00:03:47.776 --> 00:03:48.846 align:middle
Pero mira la respuesta.

00:03:48.846 --> 00:03:55.276 align:middle
Sólo contiene los campos
nombre y descripción, ¿vale?

00:03:55.686 --> 00:03:57.466 align:middle
Contiene los campos Jsun LD.

00:03:57.466 --> 00:03:59.566 align:middle
Siempre los contendrá.

00:03:59.566 --> 00:04:02.066 align:middle
Pero los datos reales son
sólo esos dos campos.

00:04:02.066 --> 00:04:08.436 align:middle
Sigue devolviendo si miramos los 40
elementos, pero sólo esos dos campos.

00:04:08.436 --> 00:04:11.626 align:middle
Si los elimináramos para que
no hubiera ninguno de ellos,

00:04:11.626 --> 00:04:15.246 align:middle
obtendríamos la respuesta
normal con todos ellos.

00:04:15.366 --> 00:04:20.486 align:middle
Así que, por defecto, obtienes todos
los campos, pero si quieres controlar

00:04:20.486 --> 00:04:22.716 align:middle
qué campos obtienes, puedes hacerlo.

00:04:22.716 --> 00:04:28.036 align:middle
Ahora bien, si echas un vistazo a la documentación
de la API Platform sobre el filtro de propiedades, en

00:04:28.036 --> 00:04:36.836 align:middle
realidad recomiendan que siga funcionando, pero
recomiendan que busques una solución diferente.

00:04:36.836 --> 00:04:38.696 align:middle
Y es algo llamado Vulcan. Se trata de

00:04:38.696 --> 00:04:44.326 align:middle
un protocolo para tu servidor web que en
realidad añade funciones a tu servidor web

00:04:44.326 --> 00:04:48.796 align:middle
y que ha sido creado por el
equipo de la API Platform.

00:04:48.796 --> 00:04:52.966 align:middle
En realidad tienen un ejemplo
muy bueno de cómo funciona.

00:04:52.966 --> 00:04:56.026 align:middle
Veámoslo un poco más abajo.

00:04:56.026 --> 00:04:58.326 align:middle
Imaginemos que tenemos la siguiente api.

00:04:58.326 --> 00:05:01.196 align:middle
Si haces una petición a slash books,
obtendrás de vuelta estos dos libros.

00:05:01.196 --> 00:05:07.076 align:middle
¿Vale? Entonces quizá hagas una petición para
obtener más información sobre el primer libro.

00:05:07.076 --> 00:05:08.486 align:middle
Haces una petición a eso.

00:05:08.546 --> 00:05:11.386 align:middle
Y esto es lo que parece.

00:05:11.386 --> 00:05:16.876 align:middle
¿Vale? Ahora, para obtener más peticiones
para el autor, haces una petición

00:05:16.876 --> 00:05:19.646 align:middle
a esta url y esto es lo que parece.

00:05:19.646 --> 00:05:27.006 align:middle
Así que puedes ver que en total, si haces una petición
a slash books para obtener toda la información

00:05:27.006 --> 00:05:37.016 align:middle
que podríamos necesitar, en realidad necesitas
hacer cuatro peticiones, la petición original,

00:05:37.016 --> 00:05:44.566 align:middle
y luego haces esta petición y esta
petición y luego la petición para el autor.

00:05:44.566 --> 00:05:48.346 align:middle
Así que fueron cuatro peticiones.

00:05:48.346 --> 00:05:55.846 align:middle
Lo que Vulcan Set te permite hacer es realizar esta
primera petición, pero luego decirle al servidor

00:05:55.846 --> 00:05:58.506 align:middle
que te envíe los datos
de las otras peticiones.

00:05:58.596 --> 00:06:02.466 align:middle
La mejor forma de verlo es en JavaScript.

00:06:02.466 --> 00:06:04.596 align:middle
Aquí tienes un pequeño ejemplo en JavaScript.

00:06:04.596 --> 00:06:05.196 align:middle
Es muy fácil.

00:06:05.196 --> 00:06:08.836 align:middle
Todo lo que tienes que hacer es, cuando utilices
tu JavaScript, utilizar la función fetch.

00:06:08.836 --> 00:06:11.596 align:middle
Dices: "Quiero recuperar los libros de barra barra uno",
y luego añades esta cabecera especial de precarga.

00:06:11.626 --> 00:06:13.246 align:middle
Y en realidad un mejor ejemplo de la precarga
PR está aquí arriba, esta precarga barra

00:06:13.276 --> 00:06:14.476 align:middle
miembro barra estrella barra autor.

00:06:14.506 --> 00:06:16.516 align:middle
Lo que básicamente le dirá a tu
servidor es que busque cualquier URL que

00:06:16.546 --> 00:06:17.416 align:middle
coincida con ese patrón y la siga.

00:06:17.446 --> 00:06:19.516 align:middle
No voy a entrar en detalles sobre esto,
pero barra miembro barra estrella va a

00:06:19.546 --> 00:06:20.506 align:middle
coincidir con barra miembro barra todas estas.

00:06:20.536 --> 00:06:21.616 align:middle
Y la barra autor también va a

00:06:21.646 --> 00:06:22.846 align:middle
seguir la clave autor una vez
que busque esos libros. El

00:06:22.876 --> 00:06:24.826 align:middle
resultado final de pasar esa cabecera
de precarga es que nuestra API

00:06:24.856 --> 00:06:26.056 align:middle
devolverá la respuesta normal
para los libros de barra,

00:06:26.086 --> 00:06:27.436 align:middle
pero también te enviará las otras URL. Como

00:06:27.466 --> 00:06:28.846 align:middle
puedes ver aquí, te va a enviar
los datos de la barra libros barra

00:06:28.876 --> 00:06:30.886 align:middle
uno barra libros barra dos
y barra autor barra uno.

00:06:30.916 --> 00:06:32.146 align:middle
Así que aquí abajo, este es
un ejemplo ligeramente diferente

00:06:32.176 --> 00:06:33.856 align:middle
en el que sólo estás obteniendo barra
libro barra uno con precarga barra autor.

00:06:33.886 --> 00:06:35.746 align:middle
Cuando hagas esto, las respuestas de
tu libro serán completamente normales.

00:06:35.776 --> 00:06:37.456 align:middle
Lo importante es que un segundo después,
si intentas utilizar fetch de nuevo

00:06:37.486 --> 00:06:38.866 align:middle
en books js o.author, va
a devolver inmediatamente.

00:06:38.896 --> 00:06:41.356 align:middle
En realidad no va a hacer una segunda petición
de edad X porque ya tienes esos datos.

00:06:41.386 --> 00:06:42.676 align:middle
Así que escribe tu script de trabajo
básicamente como de costumbre.

00:06:42.706 --> 00:06:43.846 align:middle
Todo lo que tienes que hacer es
añadir una nueva cabecera de precarga

00:06:43.876 --> 00:06:45.196 align:middle
y te beneficiarás del rendimiento extra.

00:06:45.226 --> 00:06:46.306 align:middle
Así que no voy a profundizar más en esto.

00:06:46.336 --> 00:06:47.206 align:middle
Quería que lo tuvieras en cuenta.

00:06:47.236 --> 00:06:48.406 align:middle
Puede ser una característica
muy potente en tu api.

00:06:48.436 --> 00:06:50.236 align:middle
Muy bien, a continuación, hablemos de,
quiero añadir, quiero hablar de formatos.

00:06:50.266 --> 00:06:51.436 align:middle
Sabemos que nuestra API puede devolver
representaciones jsun, ld, json

00:06:51.466 --> 00:06:52.906 align:middle
e incluso HTML de nuestras
representaciones. Vamos a añadir

00:06:52.936 --> 00:06:54.226 align:middle
nuevos formatos, incluido un formato CSV,

00:06:54.256 --> 00:06:55.786 align:middle
que va a ser la representación CSV más
rápida que jamás hayas construido.
